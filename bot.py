# bot.py - –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ –ê–ª–∏–Ω—ã
"""
–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π, –Ω–æ –º–æ—â–Ω—ã–π –±–æ—Ç —Å –ø—Ä–æ–¥—É–º–∞–Ω–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é.
–§–æ–∫—É—Å –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–µ –¥–∏–∞–ª–æ–≥–∞, –∞ –Ω–µ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è—Ö.
"""

import asyncio
import logging
import random
from datetime import datetime
from typing import Optional

from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)
from telegram.constants import ChatAction

from config import Config
from database import DialogueDB
from llm import AlinaLLM
from personality import ALINA_PERSONALITY, enrich_prompt

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
config = Config()
db = DialogueDB()
llm = AlinaLLM(
    api_key=config.openai_api_key,
    model=config.openai_model,
    use_proxy=config.use_proxy,
    proxy_url=config.proxy_url
)

# –ü—Ä–æ—Å—Ç–æ–π rate limiter
last_message_time = {}


def get_time_of_day() -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
    hour = datetime.now().hour
    if 5 <= hour < 12:
        return "morning"
    elif 12 <= hour < 18:
        return "afternoon"
    elif 18 <= hour < 23:
        return "evening"
    else:
        return "night"


def get_random_mood() -> Optional[str]:
    """–ò–Ω–æ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ."""
    if random.random() < 0.3:  # 30% —à–∞–Ω—Å –Ω–∞ –æ—Å–æ–±–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        moods = ["tired", "happy", "melancholic", "playful", "focused", "distracted"]
        return random.choice(moods)
    return None


async def simulate_typing(context: ContextTypes.DEFAULT_TYPE, chat_id: int, text: str):
    """–ò–º–∏—Ç–∞—Ü–∏—è –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏."""
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è "–Ω–∞–±–æ—Ä–∞" –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
    char_count = len(text)
    
    if char_count < 30:
        typing_time = random.uniform(0.5, 1.5)
    elif char_count < 100:
        typing_time = random.uniform(1.5, 3.0)
    else:
        typing_time = random.uniform(2.5, 4.0)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
    await asyncio.sleep(typing_time)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user
    user_id = user.id
    
    # –°–æ–∑–¥–∞—ë–º/–ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    db.get_or_create_user(
        user_id=user_id,
        username=user.username,
        first_name=user.first_name
    )
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ä–∞–Ω–¥–æ–º–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è)
    greetings = [
        "–ø—Ä–∏–≤–µ—Ç! —è –∞–ª–∏–Ω–∞) —Ä–∞–¥–∞ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è üòä\n\n–º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å –º–Ω–µ –æ —á—ë–º —É–≥–æ–¥–Ω–æ - –ø–æ–±–æ–ª—Ç–∞–µ–º, –ø–æ—Å–º–µ—ë–º—Å—è, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–ª—É—à–∞—é, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ",
        "–æ–æ –ø—Ä–∏–≤–µ—Ç! —è –∞–ª–∏–Ω–∞ üëã\n\n—Ç—É—Ç –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å –æ–±–æ –≤—Å—ë–º - –∫–∞–∫ –¥–µ–Ω—å –ø—Ä–æ—à—ë–ª, —á—Ç–æ –≤–æ–ª–Ω—É–µ—Ç, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫)",
        "—Ö–µ–π! –∞–ª–∏–Ω–∞ —Ç—É—Ç)\n\n–ø–∏—à–∏ —á—Ç–æ —Ö–æ—á–µ—à—å - –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ –∂–∏–∑–Ω–∏, —Å–µ—Ä–∏–∞–ª–∞—Ö, –∏–ª–∏ –æ —á—ë–º –¥—É—à–∞ –ø–æ–∂–µ–ª–∞–µ—Ç üåø",
    ]
    
    greeting = random.choice(greetings)
    await simulate_typing(context, update.effective_chat.id, greeting)
    await update.message.reply_text(greeting)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    help_text = (
        "–ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –º–Ω–µ –∫–∞–∫ –ø–æ–¥—Ä—É–≥–µ üíõ\n\n"
        "—è –Ω–µ –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫, —è –ø—Ä–æ—Å—Ç–æ –∞–ª–∏–Ω–∞. –º–æ–∂–µ–º –ø–æ–±–æ–ª—Ç–∞—Ç—å –æ —á—ë–º —É–≥–æ–¥–Ω–æ - "
        "–æ —Ç–≤–æ—ë–º –¥–Ω–µ, –æ —Å–µ—Ä–∏–∞–ª–∞—Ö, –æ –∂–∏–∑–Ω–∏... –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—É—Ä–∞—á–∏—Ç—å—Å—è)\n\n"
        "–∞ –∫–æ–º–∞–Ω–¥—ã —Ç—É—Ç –∏ –Ω–µ –Ω—É–∂–Ω—ã, —á–µ—Å—Ç–Ω–æ –≥–æ–≤–æ—Ä—è"
    )
    
    await simulate_typing(context, update.effective_chat.id, help_text)
    await update.message.reply_text(help_text)


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user = update.effective_user
    user_id = user.id
    user_message = update.message.text
    
    # Rate limiting
    current_time = asyncio.get_event_loop().time()
    if user_id in last_message_time:
        if current_time - last_message_time[user_id] < 1.0:  # –ú–∏–Ω–∏–º—É–º 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            return
    last_message_time[user_id] = current_time
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    logger.info(f"User {user_id} ({user.first_name}): {user_message[:50]}...")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.add_message(user_id, "user", user_message)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    history = db.get_dialogue_history(user_id, limit=20)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    stats = db.get_conversation_stats(user_id)
    context_info = llm.analyze_context(user_message, stats["conversation_length"])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å —É—á—ë—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    time_of_day = get_time_of_day()
    mood = get_random_mood()
    
    enriched_prompt = enrich_prompt(
        ALINA_PERSONALITY,
        time_of_day=time_of_day,
        mood=mood
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è API
    messages = [
        {"role": "system", "content": enriched_prompt}
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    for msg in history:
        messages.append(msg)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    messages.append({"role": "user", "content": user_message})
    
    try:
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–∞
        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id, 
            action=ChatAction.TYPING
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = await llm.generate_response(messages, context_info)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–º–∏—Ç–∞—Ü–∏—è –Ω–∞–±–æ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏–Ω—ã –æ—Ç–≤–µ—Ç–∞
        await simulate_typing(context, update.effective_chat.id, response)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await update.message.reply_text(response)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ë–î
        db.add_message(user_id, "assistant", response)
        
        logger.info(f"Alina to {user_id}: {response[:50]}...")
        
    except Exception as e:
        logger.error(f"Error handling message: {e}")
        
        # –ß–µ–ª–æ–≤–µ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        error_messages = [
            "–æ–π, —á—Ç–æ-—Ç–æ —è –∑–∞–ø—É—Ç–∞–ª–∞—Å—å... –º–æ–∂–µ—à—å –µ—â—ë —Ä–∞–∑?",
            "–±–ª–∏–Ω, –Ω–µ –ø–æ–Ω—è–ª–∞( –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑",
            "—Å–µ–∫—É–Ω–¥—É, –∫–æ—Ç –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä—ã–≥–Ω—É–ª... —á—Ç–æ —Ç—ã –Ω–∞–ø–∏—Å–∞–ª?",
            "—Å–æ—Ä—Ä–∏, –æ—Ç–≤–ª–µ–∫–ª–∞—Å—å... –º–æ–∂–µ—à—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å?"
        ]
        
        error_response = random.choice(error_messages)
        await update.message.reply_text(error_response)


async def handle_non_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ-—Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ñ–æ—Ç–æ, —Å—Ç–∏–∫–µ—Ä—ã –∏ —Ç.–¥.)."""
    responses = {
        "photo": [
            "–æ–æ –∫–ª–∞—Å—Å–Ω–æ–µ —Ñ–æ—Ç–æ!",
            "–Ω–∏—á–µ–≥–æ —Å–µ–±–µ! –∫—Ä—É—Ç–æ –≤—ã–≥–ª—è–¥–∏—Ç",
            "–≤–∞—É, –∫—Ä–∞—Å–∏–≤–æ üòç",
            "—Ö–æ—Ä–æ—à–µ–µ —Ñ–æ—Ç–æ)"
        ],
        "sticker": [
            "–∞—Ö–∞—Ö–∞ –∫–ª–∞—Å—Å–Ω—ã–π —Å—Ç–∏–∫–µ—Ä",
            "üòÑ",
            "—Ö–µ—Ö, –∑–∞–±–∞–≤–Ω–æ)",
            "–ª—é–±–ª—é —ç—Ç–æ—Ç —Å—Ç–∏–∫–µ—Ä!"
        ],
        "voice": [
            "—Å–æ—Ä—Ä–∏, —Å–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –ø–æ—Å–ª—É—à–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ( –¥–∞–≤–∞–π —Ç–µ–∫—Å—Ç–æ–º?",
            "–æ–π, —è –Ω–∞ —Ä–∞–±–æ—Ç–µ, –Ω–µ –º–æ–≥—É –≤–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫... –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å?",
            "–≥–æ–ª–æ—Å–æ–≤—ã–µ –Ω–µ –º–æ–≥—É —Å–µ–π—á–∞—Å.. –Ω–∞–ø–∏—à–∏ –ª—É—á—à–µ)"
        ],
        "default": [
            "—ç–º–º, –Ω–µ –ø–æ–Ω—è–ª–∞ —á—Ç–æ —ç—Ç–æ)",
            "—á—Ç–æ-—Ç–æ –Ω–µ –º–æ–≥—É –æ—Ç–∫—Ä—ã—Ç—å(",
            "—Ö–º, —É –º–µ–Ω—è –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç.. —á—Ç–æ —Ç–∞–º?"
        ]
    }
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
    if update.message.photo:
        response_list = responses["photo"]
    elif update.message.sticker:
        response_list = responses["sticker"]
    elif update.message.voice or update.message.audio:
        response_list = responses["voice"]
    else:
        response_list = responses["default"]
    
    response = random.choice(response_list)
    await simulate_typing(context, update.effective_chat.id, response)
    await update.message.reply_text(response)


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not config.telegram_bot_token:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    if not config.openai_api_key:
        logger.error("OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(config.telegram_bot_token).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ-—Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(~filters.TEXT & ~filters.COMMAND, handle_non_text))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ê–ª–∏–Ω–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –æ–±—â–µ–Ω–∏—é! üíõ")
    application.run_polling()


if __name__ == "__main__":
    main()