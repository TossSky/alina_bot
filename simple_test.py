# simple_test.py - —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –±–µ–∑ transport
import asyncio
import httpx
from openai import AsyncOpenAI
from dotenv import load_dotenv
import os

load_dotenv()

async def simple_test():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    
    api_key = os.getenv("OPENAI_API_KEY")
    use_proxy = os.getenv("OPENAI_USE_PROXY", "false").lower() == "true"
    proxy_address = os.getenv("OPENAI_PROXY_ADDRESS", "")
    model = os.getenv("OPENAI_MODEL", "gpt-5-mini-2025-08-07")
    
    print("üß™ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    print(f"üåê –ü—Ä–æ–∫—Å–∏: {'–≤–∫–ª—é—á–µ–Ω' if use_proxy else '–æ—Ç–∫–ª—é—á–µ–Ω'}")
    
    try:
        # –ü—Ä–æ—Å—Ç–æ–π HTTP –∫–ª–∏–µ–Ω—Ç
        if use_proxy and proxy_address:
            print(f"üì° –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏: {proxy_address}")
            http_client = httpx.AsyncClient(proxy=proxy_address)
        else:
            print("üì° –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
            http_client = httpx.AsyncClient()
        
        print("‚úÖ HTTP –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")
        
        # OpenAI –∫–ª–∏–µ–Ω—Ç
        client = AsyncOpenAI(
            api_key=api_key,
            http_client=http_client
        )
        print("‚úÖ OpenAI –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
        print("üöÄ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å...")
        response = await client.chat.completions.create(
            model=model,
            messages=[{"role": "user", "content": "Say 'Hello test'"}],
            max_tokens=10
        )
        
        print(f"‚úÖ –£—Å–ø–µ—Ö! –û—Ç–≤–µ—Ç: {response.choices[0].message.content}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
    
    finally:
        try:
            await http_client.aclose()
            print("‚úÖ –ö–ª–∏–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç")
        except:
            pass

if __name__ == "__main__":
    asyncio.run(simple_test())