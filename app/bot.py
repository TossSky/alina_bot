# app/bot.py
import asyncio, time, re
from datetime import datetime, timedelta, timezone
from zoneinfo import ZoneInfo

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes,
    CallbackQueryHandler, PreCheckoutQueryHandler, filters
)

from .config import settings
from .prompts import SYSTEM_PROMPT, STYLE_HINTS, VERBOSITY_HINTS, MOOD_TEMPLATES, TECH_BOUNDARY, AVOID_PATTERNS
from .llm_client import LLMClient
from .typing_sim import human_typing
import app.db as db
from .payments import send_stars_invoice, precheckout_stars, on_successful_payment
from .reminders import schedule_one, deschedule_one, reschedule_all_for_user, _tzinfo_from_str

# -------------------- –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è --------------------

db.init()
llm = LLMClient()

# –ø—Ä–æ—Å—Ç–æ–π —Ä–µ–π—Ç-–ª–∏–º–∏—Ç: –Ω–µ —á–∞—â–µ 1 —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É—Å–∫–æ—Ä–∏–º)
LAST_SEEN = {}

# –¥–ª—è ¬´—É–∑–∫–æ–π¬ª –∫–Ω–æ–ø–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã: –≤–∏–∑—É–∞–ª—å–Ω—ã–π –Ω–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å
FILLER = " " * 10

MONTHS_RU = {
    1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è", 5: "–º–∞—è", 6: "–∏—é–Ω—è",
    7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞", 9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
}

def _encode_hhmm(hhmm: str) -> str:
    return hhmm.replace(":", "").zfill(4)

def _decode_hhmm(compact: str) -> str:
    compact = compact.zfill(4)
    return f"{compact[:2]}:{compact[2:]}"

def format_dt(dt: datetime) -> str:
    return f"{dt.day} {MONTHS_RU[dt.month]} {dt.year}, {dt.strftime('%H:%M')} (UTC)"

def _sub_state(user_row):
    su = user_row.get("sub_until") if isinstance(user_row, dict) else user_row["sub_until"]
    if not su:
        return False, None, None
    try:
        until = datetime.fromisoformat(su)
    except Exception:
        return False, None, None
    now = datetime.now(timezone.utc).replace(tzinfo=None)
    if until <= now:
        return False, until, timedelta(0)
    return True, until, until - now

def _humanize_td(td: timedelta) -> str:
    total = int(td.total_seconds())
    if total < 0:
        total = 0
    days = total // 86400
    hours = (total % 86400) // 3600
    minutes = (total % 3600) // 60
    if days > 0:
        return f"{days} –¥–Ω. {hours} —á."
    if hours > 0:
        return f"{hours} —á. {minutes} –º–∏–Ω."
    return f"{minutes} –º–∏–Ω."

# -------------------- tz --------------------

async def _apply_tz(update, context, tz_text: str):
    user_id = update.effective_user.id
    tz_str = None
    m = re.fullmatch(r"UTC([+-])(\d{1,2})", tz_text.upper())
    if m:
        sign, hh = m.group(1), int(m.group(2))
        tz_str = f"UTC{sign}{hh}"
    else:
        try:
            _ = ZoneInfo(tz_text)
            tz_str = tz_text
        except Exception:
            # –ë–ï–ó parse_mode - –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
            await update.message.reply_text("–Ω–µ —É–∑–Ω–∞–ª–∞ —Ç–∞–∫–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å... –ø–æ–ø—Ä–æ–±—É–π —Ç–∏–ø–∞ Europe/Moscow –∏–ª–∏ UTC+3")
            return
    db.set_tz(user_id, tz_str)
    reschedule_all_for_user(context.application, user_id)
    await update.message.reply_text(f"–æ–∫–µ–π, –∑–∞–ø–æ–º–Ω–∏–ª–∞ - {tz_str}")

async def tz_cmd(update, context):
    user_id = update.effective_user.id
    arg = " ".join(context.args) if context.args else ""
    if not arg:
        context.user_data["await_tz"] = True
        cur = db.get_tz(user_id) or "–Ω–µ –∑–∞–¥–∞–Ω"
        await update.message.reply_text(
            f"–Ω–∞–ø–∏—à–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º\n"
            f"–Ω–∞–ø—Ä–∏–º–µ—Ä: Europe/Moscow, UTC+3\n"
            f"—Å–µ–π—á–∞—Å —É —Ç–µ–±—è: {cur}"
        )
        return
    await _apply_tz(update, context, arg.strip())

# -------------------- reminders UI --------------------

def _reminders_kb(user_id: int):
    rs = db.list_reminders(user_id)
    rows = []
    for r in rs:
        state = "–≤–∫–ª" if r["active"] else "–≤—ã–∫–ª"
        rid = r["id"]
        rtype = r.get("rtype") or "checkin"
        label = f"‚è∞ {r['time_local']} ({state}) ‚Äî {rtype}{FILLER}"
        rows.append([
            InlineKeyboardButton(label, callback_data=f"rem|toggle|{rid}"),
            InlineKeyboardButton("üóë", callback_data=f"rem|del|{rid}")
        ])
    rows += [
        [InlineKeyboardButton("–¥–æ–±–∞–≤–∏—Ç—å ¬´–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ¬ª (09:00)",  callback_data="rem|add|morning|0900")],
        [InlineKeyboardButton("–¥–æ–±–∞–≤–∏—Ç—å ¬´–≤–µ—á–µ—Ä–Ω–∏–π –ø—Ä–∏–≤–µ—Ç¬ª (21:00)", callback_data="rem|add|evening|2100")],
        [InlineKeyboardButton("–¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—ë –≤—Ä–µ–º—è‚Ä¶",   callback_data="rem|add|custom")],
    ]
    return InlineKeyboardMarkup(rows)

async def reminders_cmd(update, context):
    u = db.get_user(update.effective_user.id)
    tz = db.get_tz(u["user_id"]) or "UTC"
    text = (
        f"–º–æ–≥—É –ø–∏—Å–∞—Ç—å –ø–µ—Ä–≤–æ–π, —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è–ª–∏—Å—å üíõ\n"
        f"—Ç–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {tz}\n\n"
        "–Ω–∞–∂–º–∏, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ"
    )
    await update.message.reply_text(text, reply_markup=_reminders_kb(u["user_id"]))

# -------------------- status / start / help --------------------

async def status_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = db.get_user(update.effective_user.id)
    active, until, remain = _sub_state(u)
    if active:
        text = (
            f"–ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ üíõ\n"
            f"–¥–æ: {format_dt(until)}\n"
            f"–æ—Å—Ç–∞–ª–æ—Å—å: {_humanize_td(remain)}"
        )
    else:
        left = u["free_left"] or 0
        text = (
            f"–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞\n"
            f"–±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {left}\n"
            "–æ—Ñ–æ—Ä–º–∏—Ç—å: /subscribe"
        )
    await update.message.reply_text(text)

# –°–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–ª–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
TECH_KEYWORDS = [
    "–∞–ª–≥–æ—Ä–∏—Ç–º", "–∫–æ–¥", "–ø—Ä–æ–≥—Ä–∞–º–º", "python", "javascript", "java", "sql",
    "—Ñ—É–Ω–∫—Ü–∏", "–∫–ª–∞—Å—Å", "–º–µ—Ç–æ–¥", "–º–∞—Å—Å–∏–≤", "—Ü–∏–∫–ª", "for", "while", "if",
    "–¥–µ–π–∫—Å—Ç—Ä", "–≥—Ä–∞—Ñ", "–¥–µ—Ä–µ–≤", "—Ö–µ—à", "—Å–ª–æ–∂–Ω–æ—Å—Ç", "big o", "o(n)",
    "–±–∞–∑–∞ –¥–∞–Ω–Ω", "—Ç–∞–±–ª–∏—Ü", "–∑–∞–ø—Ä–æ—Å", "–∏–Ω–¥–µ–∫—Å", "join", "select",
    "–∫–æ–º–ø–∏–ª", "–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç", "debug", "git", "docker", "api", "rest",
    "–º–∞—Ç—Ä–∏—Ü", "–≤–µ–∫—Ç–æ—Ä", "–∏–Ω—Ç–µ–≥—Ä–∞–ª", "–ø—Ä–æ–∏–∑–≤–æ–¥–Ω", "—É—Ä–∞–≤–Ω–µ–Ω", "—Ñ–æ—Ä–º—É–ª",
    "–º–∞—à–∏–Ω–Ω", "–Ω–µ–π—Ä–æ–Ω", "ml", "ai", "–¥–∞—Ç–∞—Å–µ—Ç", "–º–æ–¥–µ–ª", "–æ–±—É—á–µ–Ω",
    "—Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω", "—Å—Ç–µ–∫", "–æ—á–µ—Ä–µ–¥", "—Å–≤—è–∑–Ω —Å–ø–∏—Å–∫", "—Ä–µ–∫—É—Ä—Å",
    "```", "def ", "class ", "function", "import", "return", "console.log"
]

def is_tech_question(text: str) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–æ–ø—Ä–æ—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º"""
    if not text:
        return False
    t = text.lower()
    return any(keyword in t for keyword in TECH_KEYWORDS)

def build_messages(user_id: int, name: str, user_text: str):
    u = db.get_user(user_id)
    # –£–≤–µ–ª–∏—á–∏–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ 20 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    history = db.last_dialog(user_id, limit=20)
    
    style = (u["style"] or "gentle")
    verbosity = (u["verbosity"] or "normal")
    
    msgs = [
        {"role": "system", "content": SYSTEM_PROMPT},
        {"role": "system", "content": AVOID_PATTERNS},
        {"role": "system", "content": f"–∏–º—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: {name or '–¥—Ä—É–≥'}"},
        {"role": "system", "content": f"{STYLE_HINTS.get(style,'')} {VERBOSITY_HINTS.get(verbosity,'')}".strip()},
    ]
    
    # –ï—Å–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å - –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–≥–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
    if is_tech_question(user_text):
        msgs.append({"role": "system", "content": TECH_BOUNDARY})
        # –î–æ–±–∞–≤–∏–º –µ—â—ë –æ–¥–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        msgs.append({"role": "system", "content": "–ü–û–ú–ù–ò: —Ç—ã –ù–ï –ø–æ–º–æ–≥–∞–µ—à—å —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏. –û—Ç–≤–µ—á–∞–π –∫–∞–∫ –æ–±—ã—á–Ω–∞—è –¥–µ–≤—É—à–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –≤ —ç—Ç–æ–º –Ω–µ —Ä–∞–∑–±–∏—Ä–∞–µ—Ç—Å—è."})
    
    # –ò—Å—Ç–æ—Ä–∏—è
    for h in history:
        msgs.append({"role": h["role"], "content": h["content"]})
    
    msgs.append({"role": "user", "content": user_text})
    
    # –î–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –≤—Å–µ–≥–¥–∞ short
    final_verbosity = "short" if is_tech_question(user_text) else verbosity
    
    return msgs, final_verbosity

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = db.get_user(update.effective_user.id)
    active, until, remain = _sub_state(u)

    if active:
        text = (
            f"–ø—Ä–∏–≤–µ—Ç! —è –∞–ª–∏–Ω–∞ üíõ\n"
            f"—Ä–∞–¥–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å)\n"
            f"–ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {format_dt(until)} "
            f"(–µ—â—ë {_humanize_td(remain)})\n"
            "–ø–∏—à–∏ –æ —á—ë–º —Ö–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å üåø"
        )
    else:
        text = (
            "–ø—Ä–∏–≤–µ—Ç! —è –∞–ª–∏–Ω–∞ üíõ\n"
            "—Ö–æ—á–µ—à—å –≤—ã–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å?\n"
            "–º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "- –º–Ω–µ –≥—Ä—É—Å—Ç–Ω–æ\n"
            "- —Ä–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å\n"
            "- –∫–∞–∫ —Ç–≤–æ–π –¥–µ–Ω—å?\n"
            f"–±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {u['free_left'] or 0}\n"
            "–∫–æ–º–∞–Ω–¥—ã: /profile /mood /subscribe /status /help"
        )

    reschedule_all_for_user(context.application, update.effective_user.id)
    await update.message.reply_text(text)

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "—è —Ä—è–¥–æ–º, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å üíõ\n\n"
        "–∫–æ–º–∞–Ω–¥—ã:\n"
        "/profile ‚Äî –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è\n"
        "/mood ‚Äî –∫–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å\n"
        "/reminders ‚Äî –∫–æ–≥–¥–∞ –ø–∏—Å–∞—Ç—å –ø–µ—Ä–≤–æ–π\n"
        "/tz ‚Äî —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å\n"
        "/subscribe ‚Äî –ø–æ–¥–ø–∏—Å–∫–∞\n"
        "/status ‚Äî —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏"
    )

# -------------------- –ø—Ä–æ—Ñ–∏–ª—å / —Ä–µ–∂–∏–º—ã --------------------

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = db.get_user(update.effective_user.id)
    text = (
        f"–¥–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º –æ–±—â–µ–Ω–∏–µ\n"
        f"—Å–µ–π—á–∞—Å: —Å—Ç–∏–ª—å {u['style'] or 'gentle'}, –¥–ª–∏–Ω–∞ {u['verbosity'] or 'normal'}\n\n"
        "–Ω–∞–ø–∏—à–∏ —á—Ç–æ –≤—ã–±—Ä–∞—Ç—å:\n"
        "—Å—Ç–∏–ª—å: –Ω–µ–∂–Ω–æ –∏–ª–∏ –ø–æ –¥–µ–ª—É\n"
        "–¥–ª–∏–Ω–∞: –∫–æ—Ä–æ—Ç–∫–æ, —Å—Ä–µ–¥–Ω–µ, –ø–æ–¥—Ä–æ–±–Ω–æ\n"
        "–∏–º—è: –∑–æ–≤–∏ –º–µ–Ω—è <–∏–º—è>"
    )
    await update.message.reply_text(text)

async def mood(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = (
        "–∫–∞–∫ —Ç—ã —Å–µ–π—á–∞—Å?\n"
        "–º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å: —Ç—Ä–µ–≤–æ–∂–Ω–æ, –≥—Ä—É—Å—Ç–Ω–æ, –∑–ª—é—Å—å, —É—Å—Ç–∞–ª, –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –æ–∫—Ä—ã–ª—ë–Ω\n"
        "–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ä–∞—Å—Å–∫–∞–∂–∏ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ üíõ"
    )
    await update.message.reply_text(prompt)

async def subscribe(update, context):
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚≠ê –¥–µ–Ω—å", callback_data="pay_stars:day")],
        [InlineKeyboardButton("‚≠ê –Ω–µ–¥–µ–ª—è", callback_data="pay_stars:week")],
        [InlineKeyboardButton("‚≠ê –º–µ—Å—è—Ü", callback_data="pay_stars:month")],
    ])
    await update.message.reply_text("–≤—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç üíõ", reply_markup=kb)

# -------------------- callbacks --------------------

async def on_cb(update, context):
    q = update.callback_query
    await q.answer()
    user_id = update.effective_user.id
    data = q.data or ""
    parts = data.split("|")

    if parts[:2] == ["rem", "toggle"] and len(parts) == 3:
        rid = int(parts[2])
        rs = db.list_reminders(user_id)
        cur = next((r for r in rs if r["id"] == rid), None)
        if not cur:
            await q.edit_message_text("–Ω–µ –Ω–∞—à–ª–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ...")
            return
        new_active = 0 if cur["active"] else 1
        db.toggle_reminder(user_id, rid, new_active)
        if new_active:
            tz = db.get_tz(user_id) or "UTC"
            schedule_one(context.application, user_id, rid, cur["rtype"], cur["time_local"], tz)
        else:
            deschedule_one(context.application, user_id, rid)
        await q.edit_message_reply_markup(reply_markup=_reminders_kb(user_id))
        return

    if parts[:2] == ["rem", "del"] and len(parts) == 3:
        rid = int(parts[2])
        deschedule_one(context.application, user_id, rid)
        db.delete_reminder(user_id, rid)
        await q.edit_message_reply_markup(reply_markup=_reminders_kb(user_id))
        return

    if parts[:2] == ["rem", "add"]:
        if len(parts) == 3 and parts[2] == "custom":
            await q.edit_message_text("–Ω–∞–ø–∏—à–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:30)")
            context.user_data["await_custom_time"] = True
            return

        if len(parts) == 4:
            rtype = parts[2]
            hhmm = _decode_hhmm(parts[3])
            rid = db.add_reminder(user_id, rtype, hhmm)
            tz = db.get_tz(user_id) or "UTC"
            schedule_one(context.application, user_id, rid, rtype, hhmm, tz)
            await q.edit_message_text("–¥–æ–±–∞–≤–∏–ª–∞! üåø")
            await q.message.reply_text("—Ç–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=_reminders_kb(user_id))
            return

    if data.startswith("pay_stars:"):
        plan = data.split(":", 1)[1]
        await send_stars_invoice(update, context, plan)
        return

    await q.edit_message_text("—Ö–º, –Ω–µ –ø–æ–Ω—è–ª–∞... –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑: /reminders")

# -------------------- –ø–∞—Ä—Å–µ—Ä –±—ã—Å—Ç—Ä—ã—Ö —Ñ—Ä–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è --------------------

def parse_profile_phrase(text: str):
    t = text.lower()
    style = None
    verbosity = None
    name = None

    if "–Ω–µ–∂–Ω–æ" in t:
        style = "gentle"
    if "–ø–æ –¥–µ–ª—É" in t or "–ø–æ-–¥–µ–ª–æ–≤–æ–º—É" in t:
        style = "direct"
    if "–∫–æ—Ä–æ—Ç–∫–æ" in t:
        verbosity = "short"
    if "—Å—Ä–µ–¥–Ω–µ" in t:
        verbosity = "normal"
    if "–ø–æ–¥—Ä–æ–±–Ω–æ" in t or "—Ä–∞–∑–≤—ë—Ä–Ω—É" in t:
        verbosity = "long"
    if "–∑–æ–≤–∏ –º–µ–Ω—è" in t:
        try:
            name = text.split("–∑–æ–≤–∏ –º–µ–Ω—è", 1)[1].strip(" :,.!?\n\t")
        except Exception:
            pass
    return style, verbosity, name

def is_rate_limited(user_id: int) -> bool:
    now = time.time()
    last = LAST_SEEN.get(user_id, 0)
    if now - last < 1.0:  # –£–º–µ–Ω—å—à–∏–º –¥–æ 1 —Å–µ–∫—É–Ω–¥—ã
        LAST_SEEN[user_id] = now
        return True
    LAST_SEEN[user_id] = now
    return False

# -------------------- text handler --------------------

async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text_in = (update.message.text or "").strip()

    # –æ–∂–∏–¥–∞–µ–º tz –ø–æ—Å–ª–µ /tz
    if context.user_data.get("await_tz"):
        context.user_data["await_tz"] = False
        tz_text = (update.message.text or "").strip()
        await _apply_tz(update, context, tz_text)
        return

    # —Ä–µ–π—Ç-–ª–∏–º–∏—Ç
    if is_rate_limited(user_id):
        await update.message.reply_text("—Å–µ–∫—É–Ω–¥—É... –ø–µ—á–∞—Ç–∞—é üåø")
        return

    # –æ–∂–∏–¥–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è custom reminder
    if context.user_data.get("await_custom_time"):
        txt = (update.message.text or "").strip()
        if re.fullmatch(r"\d{1,2}:\d{2}", txt):
            try:
                hh, mm = txt.split(":")
                h, m = int(hh), int(mm)
                if 0 <= h <= 23 and 0 <= m <= 59:
                    hhmm = f"{h:02d}:{m:02d}"
                    rid = db.add_reminder(user_id, "checkin", hhmm)
                    tz = db.get_tz(user_id) or "UTC"
                    schedule_one(context.application, user_id, rid, "checkin", hhmm, tz)
                    context.user_data["await_custom_time"] = False
                    await update.message.reply_text("–¥–æ–±–∞–≤–∏–ª–∞ ‚è∞", reply_markup=_reminders_kb(user_id))
                    return
            except Exception:
                pass
        await update.message.reply_text("–Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤—Ä–µ–º—è... –Ω–∞–ø–∏—à–∏ —Ç–∏–ø–∞ 09:30")
        return

    # –±—ã—Å—Ç—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Ñ—Ä–∞–∑—ã
    if any(k in text_in.lower() for k in ["–Ω–µ–∂–Ω–æ", "–ø–æ –¥–µ–ª—É", "–ø–æ-–¥–µ–ª–æ–≤–æ–º—É", "–∫–æ—Ä–æ—Ç–∫–æ", "—Å—Ä–µ–¥–Ω–µ", "–ø–æ–¥—Ä–æ–±–Ω–æ", "–∑–æ–≤–∏ –º–µ–Ω—è"]):
        style, verbosity, name = parse_profile_phrase(text_in)
        if name:
            db.set_name(user_id, name)
        if style or verbosity:
            db.set_style(user_id, style, verbosity)
        u = db.get_user(user_id)
        note = []
        if name:
            note.append(f"–±—É–¥—É –∑–≤–∞—Ç—å {u['name']}")
        if style:
            note.append("–Ω–∞—Å—Ç—Ä–æ–∏–ª–∞ —Å—Ç–∏–ª—å")
        if verbosity:
            note.append("–ø–æ–¥–æ–±—Ä–∞–ª–∞ –¥–ª–∏–Ω—É")
        if note:
            await update.message.reply_text("–≥–æ—Ç–æ–≤–æ: " + ", ".join(note) + " üíõ")
            return

    # /mood –æ—Ç–≤–µ—Ç—ã –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º
    lower = text_in.lower()
    if lower in MOOD_TEMPLATES:
        # –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –∏–∑ —à–∞–±–ª–æ–Ω–∞
        reply = MOOD_TEMPLATES[lower]
        await human_typing(context, update.effective_chat.id, reply)
        db.add_msg(user_id, "user", text_in)
        db.add_msg(user_id, "assistant", reply)
        await update.message.reply_text(reply)
        return

    # –ª–∏–º–∏—Ç—ã
    u = db.get_user(user_id)
    if not u["is_subscribed"]:
        if (u["free_left"] or 0) <= 0:
            await update.message.reply_text(
                "–æ–π, –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å...\n"
                "—Ö–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? /subscribe üíõ"
            )
            return
        db.update_user(user_id, free_left=(u["free_left"] - 1))

    # –¥–∏–∞–ª–æ–≥
    db.add_msg(user_id, "user", text_in)
    msgs, pref_verbosity = build_messages(user_id, u["name"] or update.effective_user.first_name, text_in)
    
    try:
        reply = await llm.chat(
            msgs,
            verbosity=pref_verbosity,
            safety=True
        )
    except Exception as e:
        # –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ–ª–ª–±–µ–∫
        reply = "—á—Ç–æ-—Ç–æ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º... –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑?"

    await human_typing(context, update.effective_chat.id, reply)
    db.add_msg(user_id, "assistant", reply)
    
    # –í–ê–ñ–ù–û: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ë–ï–ó parse_mode –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    await update.message.reply_text(reply)

# -------------------- —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–æ—Ç–ª–∞–¥–∫–∞) --------------------

async def pingme_cmd(update, context):
    try:
        minutes = int(context.args[0]) if context.args else 1
    except Exception:
        minutes = 1
    when = datetime.now(timezone.utc) + timedelta(minutes=minutes)

    async def _once(ctx):
        await ctx.bot.send_message(chat_id=update.effective_user.id, text="–ø—Ä–∏–≤–µ—Ç! —è —Ç—É—Ç üíõ")

    context.job_queue.run_once(_once, when=when, data={}, name=f"ping:{update.effective_user.id}")
    await update.message.reply_text(f"–æ–∫–µ–π, –Ω–∞–ø–∏—à—É —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω")

async def jobs_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    jq = context.application.job_queue
    if jq is None:
        await update.message.reply_text("JobQueue –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç...")
        return

    user_id = update.effective_user.id
    tz_str = db.get_tz(user_id) or "UTC"
    tzinfo = _tzinfo_from_str(tz_str)

    rems = db.list_reminders(user_id)
    if not rems:
        await update.message.reply_text("—É —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π... –¥–æ–±–∞–≤—å –≤ /reminders üåø")
        return

    lines = []
    for r in rems:
        name = f"rem:{user_id}:{r['id']}"
        jobs = jq.get_jobs_by_name(name)
        state = "–≤–∫–ª" if r["active"] else "–≤—ã–∫–ª"
        if jobs:
            j = jobs[0]
            nr = getattr(j, "next_run_time", None)
            when_local = nr.astimezone(tzinfo).strftime("%Y-%m-%d %H:%M:%S") if nr else "?"
            lines.append(f"{r['time_local']} ({r.get('rtype') or 'checkin'}, {state}) ‚Üí {when_local} ({tz_str})")
        else:
            lines.append(f"{r['time_local']} ({r.get('rtype') or 'checkin'}, {state}) ‚Üí –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ")

    await update.message.reply_text("–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ:\n" + "\n".join(lines))

# -------------------- main --------------------

def main():
    app = Application.builder().token(settings.telegram_bot_token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("profile", profile))
    app.add_handler(CommandHandler("mood", mood))
    app.add_handler(CommandHandler("reminders", reminders_cmd))
    app.add_handler(CommandHandler("tz", tz_cmd))
    app.add_handler(CommandHandler("subscribe", subscribe))
    app.add_handler(CommandHandler("status", status_cmd))
    app.add_handler(CommandHandler("pingme", pingme_cmd))
    app.add_handler(CommandHandler("jobs", jobs_cmd))

    app.add_handler(CallbackQueryHandler(on_cb))

    # Payments (Stars)
    app.add_handler(PreCheckoutQueryHandler(precheckout_stars))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, on_successful_payment))

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))
    app.run_polling()

if __name__ == "__main__":
    main()