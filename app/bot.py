import asyncio, time, re, locale
from datetime import datetime, timedelta, timezone
from zoneinfo import ZoneInfo

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes,
    CallbackQueryHandler, PreCheckoutQueryHandler, filters
)

from .config import settings
from .prompts import SYSTEM_PROMPT, STYLE_HINTS, VERBOSITY_HINTS, MOOD_TEMPLATES
from .llm_client import LLMClient
from .typing_sim import human_typing
import app.db as db
from .payments import send_stars_invoice, precheckout_stars, on_successful_payment
from .reminders import schedule_one, deschedule_one, reschedule_all_for_user


db.init()
llm = LLMClient()
# –ø—Ä–æ—Å—Ç–æ–π —Ä–µ–π—Ç-–ª–∏–º–∏—Ç: –Ω–µ —á–∞—â–µ 1 —Å–æ–æ–±—â–µ–Ω–∏—è –≤ 2 —Å–µ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
LAST_SEEN = {}

MONTHS_RU = {1:"—è–Ω–≤–∞—Ä—è",2:"—Ñ–µ–≤—Ä–∞–ª—è",3:"–º–∞—Ä—Ç–∞",4:"–∞–ø—Ä–µ–ª—è",5:"–º–∞—è",6:"–∏—é–Ω—è",7:"–∏—é–ª—è",8:"–∞–≤–≥—É—Å—Ç–∞",9:"—Å–µ–Ω—Ç—è–±—Ä—è",10:"–æ–∫—Ç—è–±—Ä—è",11:"–Ω–æ—è–±—Ä—è",12:"–¥–µ–∫–∞–±—Ä—è"}

def _encode_hhmm(hhmm: str) -> str:
    # "09:30" -> "0930"
    return hhmm.replace(":", "").zfill(4)

def _decode_hhmm(compact: str) -> str:
    # "0930" -> "09:30"
    compact = compact.zfill(4)
    return f"{compact[:2]}:{compact[2:]}"


def format_dt(dt: datetime) -> str:
    return f"{dt.day} {MONTHS_RU[dt.month]} {dt.year}, {dt.strftime('%H:%M')} (UTC)"

def _sub_state(user_row):
    su = user_row.get("sub_until") if isinstance(user_row, dict) else user_row["sub_until"]
    if not su:
        return False, None, None
    try:
        until = datetime.fromisoformat(su)
    except Exception:
        return False, None, None
    now = datetime.now(timezone.utc).replace(tzinfo=None)  # –±–µ–∑ DeprecationWarning
    if until <= now:
        return False, until, timedelta(0)
    return True, until, until - now

def _humanize_td(td: timedelta) -> str:
    total = int(td.total_seconds())
    if total < 0: total = 0
    days = total // 86400
    hours = (total % 86400) // 3600
    minutes = (total % 3600) // 60
    if days > 0: return f"{days} –¥–Ω. {hours} —á."
    if hours > 0: return f"{hours} —á. {minutes} –º–∏–Ω."
    return f"{minutes} –º–∏–Ω."

async def _apply_tz(update, context, tz_text: str):
    user_id = update.effective_user.id
    tz_str = None
    m = re.fullmatch(r"UTC([+-])(\d{1,2})", tz_text.upper())
    if m:
        sign, hh = m.group(1), int(m.group(2))
        tz_str = f"UTC{sign}{hh}"
    else:
        try:
            _ = ZoneInfo(tz_text)
            tz_str = tz_text
        except Exception:
            await update.message.reply_text("–ù–µ —É–∑–Ω–∞–ª–∞ —Ç–∞–∫–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –ü—Ä–∏–º–µ—Ä: Europe/Tallinn –∏–ª–∏ UTC+3")
            return
    db.set_tz(user_id, tz_str)
    reschedule_all_for_user(context.application, user_id)
    await update.message.reply_text(f"–ì–æ—Ç–æ–≤–æ! –ë—É–¥—É –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ {tz_str}.")


async def tz_cmd(update, context):
    user_id = update.effective_user.id
    arg = " ".join(context.args) if context.args else ""
    if not arg:
        context.user_data["await_tz"] = True
        cur = db.get_tz(user_id) or "–Ω–µ –∑–∞–¥–∞–Ω"
        await update.message.reply_text(
            "–ù–∞–ø–∏—à–∏ —Ç–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n"
            "–ü—Ä–∏–º–µ—Ä—ã: Europe/Tallinn, Europe/Moscow, UTC+3, UTC-5\n"
            f"–°–µ–π—á–∞—Å: {cur}"
        )
        return
    await _apply_tz(update, context, arg.strip())


def _reminders_kb(user_id:int):
    rs = db.list_reminders(user_id)
    rows = []
    for r in rs:
        state = "–≤–∫–ª" if r["active"] else "–≤—ã–∫–ª"
        rows.append([
            InlineKeyboardButton(
                f"‚è∞ {r['time_local']} ({state})",
                callback_data=f"rem|toggle|{r['id']}"
            )
        ])
    rows += [
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —É—Ç—Ä–æ (09:00)",  callback_data="rem|add|checkin|0900")],
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤–µ—á–µ—Ä (21:00)", callback_data="rem|add|care|2100")],
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—ë –≤—Ä–µ–º—è‚Ä¶",   callback_data="rem|add|custom")],
    ]
    return InlineKeyboardMarkup(rows)


async def reminders_cmd(update, context):
    u = db.get_user(update.effective_user.id)
    tz = db.get_tz(u["user_id"]) or "UTC"
    text = ("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–º–æ–≥—É—Ç –Ω–∞–º –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –Ω–∞ —Å–≤—è–∑–∏ üíõ\n"
            f"–¢–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {tz}\n\n"
            "–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å, –∏–ª–∏ –¥–æ–±–∞–≤—å –Ω–æ–≤—ã–µ.")
    await update.message.reply_text(text, reply_markup=_reminders_kb(u["user_id"]))


async def status_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = db.get_user(update.effective_user.id)
    active, until, remain = _sub_state(u)
    if active:
        text = (
            "–°—Ç–∞—Ç—É—Å: –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ üíõ\n"
            f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {format_dt(until)}\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å: {_humanize_td(remain)}"
        )
    else:
        left = u["free_left"] or 0
        text = (
            "–°—Ç–∞—Ç—É—Å: –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.\n"
            f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–ª–æ—Å—å: {left}\n"
            "–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É: /subscribe"
        )
    await update.message.reply_text(text)


def build_messages(user_id:int, name:str, user_text:str):
    u = db.get_user(user_id)
    history = db.last_dialog(user_id, limit=12)

    style = (u["style"] or "gentle")
    verbosity = (u["verbosity"] or "normal")
    style_hint = STYLE_HINTS.get(style, "")
    verbose_hint = VERBOSITY_HINTS.get(verbosity, "")

    msgs = [
        {"role": "system", "content": SYSTEM_PROMPT},
        {"role": "system", "content": f"–ò–º—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: {name or '–¥—Ä—É–≥'}."},
        {"role": "system", "content": f"{style_hint} {verbose_hint}".strip()}
    ]
    for h in history:
        msgs.append({"role": h["role"], "content": h["content"]})
    msgs.append({"role": "user", "content": user_text})
    return msgs

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = db.get_user(update.effective_user.id)
    active, until, remain = _sub_state(u)
    
    if active:
        text = (
            "–ü—Ä–∏–≤–µ—Ç! –Ø –ê–ª–∏–Ω–∞ üíõ\n"
            "–†–∞–¥–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å.\n"
            f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {format_dt(until)} "
            f"(–µ—â—ë {_humanize_td(remain)}).\n"
            "–ü–∏—à–∏, –æ —á—ë–º —Ö–æ—á–µ—Ç—Å—è –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å üåø"
        )
    else:
        text = (
            "–ü—Ä–∏–≤–µ—Ç! –Ø –ê–ª–∏–Ω–∞ üíõ\n"
            "–•–æ—á–µ—à—å –≤—ã–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è, –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è–º–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å?\n"
            "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å:\n"
            "‚Ä¢ ¬´–ú–Ω–µ –≥—Ä—É—Å—Ç–Ω–æ, –ø–æ–¥–¥–µ—Ä–∂–∏¬ª\n"
            "‚Ä¢ ¬´–ü–æ–º–æ–≥–∏ –Ω–∞–π—Ç–∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é¬ª\n"
            "‚Ä¢ ¬´–ü–æ–±–æ–ª—Ç–∞–µ–º –æ —á—ë–º-–Ω–∏–±—É–¥—å –ª—ë–≥–∫–æ–º?¬ª\n"
            f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–ª–æ—Å—å: {u['free_left'] or 0}.\n"
            "–ö–æ–º–∞–Ω–¥—ã: /profile /mood /subscribe /status /help"
        )
    reschedule_all_for_user(context.application, update.effective_user.id)

    await update.message.reply_text(text)


async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–Ø —Ä—è–¥–æ–º, —á—Ç–æ–±—ã –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å üíõ\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /profile ‚Äî –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Ç–∏–ª—å (–Ω–µ–∂–Ω–æ/–ø–æ –¥–µ–ª—É) –∏ –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–æ–≤\n"
        "‚Ä¢ /mood ‚Äî –º—è–≥–∫–∏–π —á–µ–∫-–∏–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è\n"
        "‚Ä¢ /subscribe ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–≤—ë–∑–¥–∞–º–∏\n"
        "‚Ä¢ /status ‚Äî —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ª–∏–º–∏—Ç–æ–≤"
    )


async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = db.get_user(update.effective_user.id)
    text = (
        "–î–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º –æ–±—â–µ–Ω–∏–µ.\n"
        f"–¢–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å: {u['style'] or 'gentle'}, –¥–ª–∏–Ω–∞: {u['verbosity'] or 'normal'}.\n\n"
        "–ù–∞–ø–∏—à–∏, —á—Ç–æ –≤—ã–±—Ä–∞—Ç—å:\n"
        "‚Ä¢ –°—Ç–∏–ª—å: ¬´–Ω–µ–∂–Ω–æ¬ª –∏–ª–∏ ¬´–ø–æ –¥–µ–ª—É¬ª\n"
        "‚Ä¢ –î–ª–∏–Ω–∞: ¬´–∫–æ—Ä–æ—Ç–∫–æ¬ª, ¬´—Å—Ä–µ–¥–Ω–µ¬ª, ¬´–ø–æ–¥—Ä–æ–±–Ω–æ¬ª\n"
        "‚Ä¢ –ò–º—è: ¬´–∑–æ–≤–∏ –º–µ–Ω—è <–ò–º—è>¬ª"
    )
    await update.message.reply_text(text)

async def mood(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = (
        "–ö–∞–∫ —Ç—ã —Å–µ–π—á–∞—Å? –í—ã–±–µ—Ä–∏ –±–ª–∏–∂–µ –≤—Å–µ–≥–æ: —Ç—Ä–µ–≤–æ–∂–Ω–æ / –≥—Ä—É—Å—Ç–Ω–æ / –∑–ª—é—Å—å / —É—Å—Ç–∞–ª / –Ω–æ—Ä–º–∞–ª—å–Ω–æ / –æ–∫—Ä—ã–ª—ë–Ω.\n"
        "–ú–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–ª–æ–≤–æ. –Ø –ø–æ–¥—Å—Ç—Ä–æ—é—Å—å üíõ"
    )
    await update.message.reply_text(prompt)

async def subscribe(update, context):
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚≠ê –î–µ–Ω—å", callback_data="pay_stars:day")],
        [InlineKeyboardButton("‚≠ê –ù–µ–¥–µ–ª—è", callback_data="pay_stars:week")],
        [InlineKeyboardButton("‚≠ê –ú–µ—Å—è—Ü", callback_data="pay_stars:month")],
    ])
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç üíõ", reply_markup=kb)


async def on_cb(update, context):
    q = update.callback_query
    await q.answer()
    user_id = update.effective_user.id
    data = q.data or ""
    parts = data.split("|")

    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    if parts[:2] == ["rem", "toggle"] and len(parts) == 3:
        rid = int(parts[2])
        rs = db.list_reminders(user_id)
        cur = next((r for r in rs if r["id"] == rid), None)
        if not cur:
            await q.edit_message_text("–ù–µ –Ω–∞—à–ª–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.")
            return
        new_active = 0 if cur["active"] else 1
        db.toggle_reminder(user_id, rid, new_active)
        if new_active:
            tz = db.get_tz(user_id) or "UTC"
            schedule_one(context.application, user_id, rid, cur["rtype"], cur["time_local"], tz)
        else:
            deschedule_one(context.application, user_id, rid)
        await q.edit_message_reply_markup(reply_markup=_reminders_kb(user_id))
        return

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞ –∏–ª–∏ custom
    if parts[:2] == ["rem", "add"]:
        # custom ‚Äî –ø—Ä–æ—Å–∏–º –≤—Ä–µ–º—è
        if len(parts) == 3 and parts[2] == "custom":
            await q.edit_message_text("–ù–∞–ø–∏—à–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:30)")
            context.user_data["await_custom_time"] = True
            return

        # –ø—Ä–µ—Å–µ—Ç—ã: rem|add|<rtype>|<HHMM>
        if len(parts) == 4:
            rtype = parts[2]           # "checkin" | "care"
            hhmm = _decode_hhmm(parts[3])
            rid = db.add_reminder(user_id, rtype, hhmm)
            tz = db.get_tz(user_id) or "UTC"
            schedule_one(context.application, user_id, rid, rtype, hhmm, tz)
            await q.edit_message_text("–î–æ–±–∞–≤–∏–ª–∞! üåø")
            await q.message.reply_text("–¢–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=_reminders_kb(user_id))
            return

    # –ü–ª–∞—Ç—ë–∂–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –±—ã–ª–æ)
    if data.startswith("pay_stars:"):
        plan = data.split(":", 1)[1]
        await send_stars_invoice(update, context, plan)
        return

    await q.edit_message_text("–•–º, –Ω–µ –ø–æ–Ω—è–ª–∞ –¥–µ–π—Å—Ç–≤–∏–µ. –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑: /reminders")


def parse_profile_phrase(text: str):
    t = text.lower()
    style = None
    verbosity = None
    name = None

    if "–Ω–µ–∂–Ω–æ" in t:
        style = "gentle"
    if "–ø–æ –¥–µ–ª—É" in t or "–ø–æ-–¥–µ–ª–æ–≤–æ–º—É" in t:
        style = "direct"
    if "–∫–æ—Ä–æ—Ç–∫–æ" in t:
        verbosity = "short"
    if "—Å—Ä–µ–¥–Ω–µ" in t or "—Å—Ä–µ–¥–Ω–µ" in t:
        verbosity = "normal"
    if "–ø–æ–¥—Ä–æ–±–Ω–æ" in t or "—Ä–∞–∑–≤—ë—Ä–Ω—É" in t:
        verbosity = "long"
    if "–∑–æ–≤–∏ –º–µ–Ω—è" in t:
        # –∑–æ–≤–∏ –º–µ–Ω—è –í–∞—Å–µ–π -> –≤–æ–∑—å–º—ë–º –≤—Å—ë –ø–æ—Å–ª–µ "–∑–æ–≤–∏ –º–µ–Ω—è"
        try:
            name = text.split("–∑–æ–≤–∏ –º–µ–Ω—è", 1)[1].strip(" :,.!?\n\t")
        except Exception:
            pass
    return style, verbosity, name

def is_rate_limited(user_id:int) -> bool:
    now = time.time()
    last = LAST_SEEN.get(user_id, 0)
    if now - last < 2.0:
        LAST_SEEN[user_id] = now  # –æ–±–Ω–æ–≤–∏–º –≤—Å—ë —Ä–∞–≤–Ω–æ
        return True
    LAST_SEEN[user_id] = now
    return False

async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text_in = (update.message.text or "").strip()
    # --- –æ–∂–∏–¥–∞–µ–º —Ç–∞–π–º–∑–æ–Ω—É –ø–æ—Å–ª–µ /tz ---
    if context.user_data.get("await_tz"):
        context.user_data["await_tz"] = False
        tz_text = (update.message.text or "").strip()
        await _apply_tz(update, context, tz_text)
        return

    # —Ä–µ–π—Ç-–ª–∏–º–∏—Ç
    if is_rate_limited(user_id):
        await update.message.reply_text("–î–∞–π –º–Ω–µ —Å–µ–∫—É–Ω–¥—É —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç üåø")
        return

    if context.user_data.get("await_custom_time"):
        txt = (update.message.text or "").strip()
        if re.fullmatch(r"\d{1,2}:\d{2}", txt):
            try:
                hh, mm = txt.split(":")
                h, m = int(hh), int(mm)
                if 0 <= h <= 23 and 0 <= m <= 59:
                    hhmm = f"{h:02d}:{m:02d}"
                    rid = db.add_reminder(user_id, "checkin", hhmm)
                    tz = db.get_tz(user_id) or "UTC"
                    schedule_one(context.application, user_id, rid, "checkin", hhmm, tz)
                    context.user_data["await_custom_time"] = False
                    await update.message.reply_text("–î–æ–±–∞–≤–∏–ª–∞ ‚è∞ –ì–æ—Ç–æ–≤–æ!", reply_markup=_reminders_kb(user_id))
                    return
            except Exception:
                pass
        await update.message.reply_text("–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤—Ä–µ–º—è. –ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–∞–∫: 09:30")
        return


    # –±—ã—Å—Ç—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Ñ—Ä–∞–∑—ã
    if any(k in text_in.lower() for k in ["–Ω–µ–∂–Ω–æ", "–ø–æ –¥–µ–ª—É", "–ø–æ-–¥–µ–ª–æ–≤–æ–º—É", "–∫–æ—Ä–æ—Ç–∫–æ", "—Å—Ä–µ–¥–Ω–µ", "–ø–æ–¥—Ä–æ–±–Ω–æ", "–∑–æ–≤–∏ –º–µ–Ω—è"]):
        style, verbosity, name = parse_profile_phrase(text_in)
        if name: db.set_name(user_id, name)
        if style or verbosity: db.set_style(user_id, style, verbosity)
        u = db.get_user(user_id)
        note = []
        if name: note.append(f"–±—É–¥—É –∑–≤–∞—Ç—å —Ç–µ–±—è {u['name']}")
        if style: note.append("–Ω–∞—Å—Ç—Ä–æ–∏–ª–∞ —Å—Ç–∏–ª—å")
        if verbosity: note.append("–ø–æ–¥–æ–±—Ä–∞–ª–∞ –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–æ–≤")
        if note:
            await update.message.reply_text("–ì–æ—Ç–æ–≤–æ: " + ", ".join(note) + " üíõ")
            return

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ /mood –æ—Ç–≤–µ—Ç–æ–≤ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º
    lower = text_in.lower()
    if lower in MOOD_TEMPLATES:
        plan = MOOD_TEMPLATES[lower]
        msgs = [
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "system", "content": "–û—Ç–≤–µ—Ç—å –∫–∞–∫ –±–ª–∏–∑–∫–∞—è –ø–æ–¥—Ä—É–≥–∞. –ö–æ—Ä–æ—Ç–∫–∏–º–∏ –∞–±–∑–∞—Ü–∞–º–∏."},
            {"role": "system", "content": f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: {lower}. {plan}"},
            {"role": "user", "content": "–ü–æ–¥–¥–µ—Ä–∂–∏ –º–µ–Ω—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞."}
        ]
        try:
            reply = await llm.chat(msgs, temperature=0.8, max_tokens=500)
        except Exception:
            reply = "–Ø —Ä—è–¥–æ–º. –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å –æ–¥–Ω–æ–≥–æ —Ç—ë–ø–ª–æ–≥–æ —à–∞–≥–∞ ‚Äî –∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º, –∫–∞–∫ —Ç–µ–±–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ üíõ"
        await human_typing(context, update.effective_chat.id, reply)
        db.add_msg(user_id, "user", text_in)
        db.add_msg(user_id, "assistant", reply)
        await update.message.reply_text(reply)
        return

    # –ª–∏–º–∏—Ç—ã
    u = db.get_user(user_id)
    if not u["is_subscribed"]:
        if (u["free_left"] or 0) <= 0:
            await update.message.reply_text(
                "–ü–æ—Ö–æ–∂–µ, –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –•–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π? "
                "–Ø –±—É–¥—É —Ä—è–¥–æ–º üíõ (–∫–æ–º–∞–Ω–¥–∞ /subscribe)"
            )
            return
        db.update_user(user_id, free_left=(u["free_left"] - 1))

    # –¥–∏–∞–ª–æ–≥
    db.add_msg(user_id, "user", text_in)
    msgs = build_messages(user_id, u["name"] or update.effective_user.first_name, text_in)

    try:
        reply = await llm.chat(msgs, temperature=0.85, max_tokens=700)
    except Exception:
        reply = "–ö–∞–∂–µ—Ç—Å—è, —É –º–µ–Ω—è –∑–∞–º–∏–Ω–∫–∞ —Å–æ —Å–≤—è–∑—å—é. –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ üíõ"

    # –∏–º–∏—Ç–∞—Ü–∏—è –Ω–∞–±–æ—Ä–∞ ‚Äî –ø–æ –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–º—É –æ—Ç–≤–µ—Ç—É
    await human_typing(context, update.effective_chat.id, reply)
    db.add_msg(user_id, "assistant", reply)
    await update.message.reply_text(reply)

def main():
    app = Application.builder().token(settings.telegram_bot_token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("profile", profile))
    app.add_handler(CommandHandler("mood", mood))
    app.add_handler(CommandHandler("subscribe", subscribe))
    app.add_handler(CommandHandler("status", status_cmd))
    app.add_handler(CommandHandler("tz", tz_cmd))
    app.add_handler(CommandHandler("reminders", reminders_cmd))
    app.add_handler(CallbackQueryHandler(on_cb))
    # Payments (Stars): pre-checkout + successful
    
    app.add_handler(PreCheckoutQueryHandler(precheckout_stars))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, on_successful_payment))

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))
    app.run_polling()

if __name__ == "__main__":
    main()
