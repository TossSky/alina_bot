import asyncio, time
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, CallbackQueryHandler, filters
from .config import settings
from .prompts import SYSTEM_PROMPT, STYLE_HINTS, VERBOSITY_HINTS, MOOD_TEMPLATES
from .llm_client import LLMClient
from .typing_sim import human_typing
import app.db as db
from .payments import send_stars_invoice, precheckout_stars, on_successful_payment, build_redsys_start_url
from telegram.ext import PreCheckoutQueryHandler

db.init()
llm = LLMClient()
# –ø—Ä–æ—Å—Ç–æ–π —Ä–µ–π—Ç-–ª–∏–º–∏—Ç: –Ω–µ —á–∞—â–µ 1 —Å–æ–æ–±—â–µ–Ω–∏—è –≤ 2 —Å–µ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
LAST_SEEN = {}

def build_messages(user_id:int, name:str, user_text:str):
    u = db.get_user(user_id)
    history = db.last_dialog(user_id, limit=12)

    style = (u["style"] or "gentle")
    verbosity = (u["verbosity"] or "normal")
    style_hint = STYLE_HINTS.get(style, "")
    verbose_hint = VERBOSITY_HINTS.get(verbosity, "")

    msgs = [
        {"role": "system", "content": SYSTEM_PROMPT},
        {"role": "system", "content": f"–ò–º—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: {name or '–¥—Ä—É–≥'}."},
        {"role": "system", "content": f"{style_hint} {verbose_hint}".strip()}
    ]
    for h in history:
        msgs.append({"role": h["role"], "content": h["content"]})
    msgs.append({"role": "user", "content": user_text})
    return msgs

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = db.get_user(update.effective_user.id)
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ê–ª–∏–Ω–∞ üíõ\n"
        "–•–æ—á–µ—à—å –≤—ã–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è, –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è–º–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å?\n"
        "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å:\n"
        "‚Ä¢ ¬´–ú–Ω–µ –≥—Ä—É—Å—Ç–Ω–æ, –ø–æ–¥–¥–µ—Ä–∂–∏¬ª\n"
        "‚Ä¢ ¬´–ü–æ–º–æ–≥–∏ –Ω–∞–π—Ç–∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é¬ª\n"
        "‚Ä¢ ¬´–ü–æ–±–æ–ª—Ç–∞–µ–º –æ —á—ë–º-–Ω–∏–±—É–¥—å –ª—ë–≥–∫–æ–º?¬ª\n"
        f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–ª–æ—Å—å: {u['free_left'] or 0}.\n"
        "–ö–æ–º–∞–Ω–¥—ã: /profile /mood /subscribe /help"
    )
    await update.message.reply_text(text)

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–Ø —Ä—è–¥–æ–º, —á—Ç–æ–±—ã –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å üíõ\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /profile ‚Äî –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Ç–∏–ª—å (–Ω–µ–∂–Ω–æ/–ø–æ –¥–µ–ª—É) –∏ –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–æ–≤\n"
        "‚Ä¢ /mood ‚Äî –º—è–≥–∫–∏–π —á–µ–∫-–∏–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è\n"
        "‚Ä¢ /subscribe ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
    )

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = db.get_user(update.effective_user.id)
    text = (
        "–î–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º –æ–±—â–µ–Ω–∏–µ.\n"
        f"–¢–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å: {u['style'] or 'gentle'}, –¥–ª–∏–Ω–∞: {u['verbosity'] or 'normal'}.\n\n"
        "–ù–∞–ø–∏—à–∏, —á—Ç–æ –≤—ã–±—Ä–∞—Ç—å:\n"
        "‚Ä¢ –°—Ç–∏–ª—å: ¬´–Ω–µ–∂–Ω–æ¬ª –∏–ª–∏ ¬´–ø–æ –¥–µ–ª—É¬ª\n"
        "‚Ä¢ –î–ª–∏–Ω–∞: ¬´–∫–æ—Ä–æ—Ç–∫–æ¬ª, ¬´—Å—Ä–µ–¥–Ω–µ¬ª, ¬´–ø–æ–¥—Ä–æ–±–Ω–æ¬ª\n"
        "‚Ä¢ –ò–º—è: ¬´–∑–æ–≤–∏ –º–µ–Ω—è <–ò–º—è>¬ª"
    )
    await update.message.reply_text(text)

async def mood(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = (
        "–ö–∞–∫ —Ç—ã —Å–µ–π—á–∞—Å? –í—ã–±–µ—Ä–∏ –±–ª–∏–∂–µ –≤—Å–µ–≥–æ: —Ç—Ä–µ–≤–æ–∂–Ω–æ / –≥—Ä—É—Å—Ç–Ω–æ / –∑–ª—é—Å—å / —É—Å—Ç–∞–ª / –Ω–æ—Ä–º–∞–ª—å–Ω–æ / –æ–∫—Ä—ã–ª—ë–Ω.\n"
        "–ú–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–ª–æ–≤–æ. –Ø –ø–æ–¥—Å—Ç—Ä–æ—é—Å—å üíõ"
    )
    await update.message.reply_text(prompt)

async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å –∑–≤—ë–∑–¥–∞–º–∏ ‚≠ê", callback_data="pay_stars")],
        [InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π (Redsys)", callback_data="pay_redsys")]
    ])
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–±, —á—Ç–æ–±—ã –º—ã –æ–±—â–∞–ª–∏—Å—å –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π üíõ",
        reply_markup=kb
    )

async def on_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    user_id = update.effective_user.id

    if q.data == "pay_stars":
        await send_stars_invoice(update, context)
    elif q.data == "pay_redsys":
        link = build_redsys_start_url(user_id=user_id, amount_eur_cents=499)  # 4.99 EUR
        await q.edit_message_text(
            "–ü–µ—Ä–µ–π–¥–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π:\n" + link + "\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
        )

def parse_profile_phrase(text: str):
    t = text.lower()
    style = None
    verbosity = None
    name = None

    if "–Ω–µ–∂–Ω–æ" in t:
        style = "gentle"
    if "–ø–æ –¥–µ–ª—É" in t or "–ø–æ-–¥–µ–ª–æ–≤–æ–º—É" in t:
        style = "direct"
    if "–∫–æ—Ä–æ—Ç–∫–æ" in t:
        verbosity = "short"
    if "—Å—Ä–µ–¥–Ω–µ" in t or "—Å—Ä–µ–¥–Ω–µ" in t:
        verbosity = "normal"
    if "–ø–æ–¥—Ä–æ–±–Ω–æ" in t or "—Ä–∞–∑–≤—ë—Ä–Ω—É" in t:
        verbosity = "long"
    if "–∑–æ–≤–∏ –º–µ–Ω—è" in t:
        # –∑–æ–≤–∏ –º–µ–Ω—è –í–∞—Å–µ–π -> –≤–æ–∑—å–º—ë–º –≤—Å—ë –ø–æ—Å–ª–µ "–∑–æ–≤–∏ –º–µ–Ω—è"
        try:
            name = text.split("–∑–æ–≤–∏ –º–µ–Ω—è", 1)[1].strip(" :,.!?\n\t")
        except Exception:
            pass
    return style, verbosity, name

def is_rate_limited(user_id:int) -> bool:
    now = time.time()
    last = LAST_SEEN.get(user_id, 0)
    if now - last < 2.0:
        LAST_SEEN[user_id] = now  # –æ–±–Ω–æ–≤–∏–º –≤—Å—ë —Ä–∞–≤–Ω–æ
        return True
    LAST_SEEN[user_id] = now
    return False

async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text_in = (update.message.text or "").strip()

    # —Ä–µ–π—Ç-–ª–∏–º–∏—Ç
    if is_rate_limited(user_id):
        await update.message.reply_text("–î–∞–π –º–Ω–µ —Å–µ–∫—É–Ω–¥—É —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç üåø")
        return

    # –±—ã—Å—Ç—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Ñ—Ä–∞–∑—ã
    if any(k in text_in.lower() for k in ["–Ω–µ–∂–Ω–æ", "–ø–æ –¥–µ–ª—É", "–ø–æ-–¥–µ–ª–æ–≤–æ–º—É", "–∫–æ—Ä–æ—Ç–∫–æ", "—Å—Ä–µ–¥–Ω–µ", "–ø–æ–¥—Ä–æ–±–Ω–æ", "–∑–æ–≤–∏ –º–µ–Ω—è"]):
        style, verbosity, name = parse_profile_phrase(text_in)
        if name: db.set_name(user_id, name)
        if style or verbosity: db.set_style(user_id, style, verbosity)
        u = db.get_user(user_id)
        note = []
        if name: note.append(f"–±—É–¥—É –∑–≤–∞—Ç—å —Ç–µ–±—è {u['name']}")
        if style: note.append("–Ω–∞—Å—Ç—Ä–æ–∏–ª–∞ —Å—Ç–∏–ª—å")
        if verbosity: note.append("–ø–æ–¥–æ–±—Ä–∞–ª–∞ –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–æ–≤")
        if note:
            await update.message.reply_text("–ì–æ—Ç–æ–≤–æ: " + ", ".join(note) + " üíõ")
            return

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ /mood –æ—Ç–≤–µ—Ç–æ–≤ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º
    lower = text_in.lower()
    if lower in MOOD_TEMPLATES:
        plan = MOOD_TEMPLATES[lower]
        msgs = [
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "system", "content": "–û—Ç–≤–µ—Ç—å –∫–∞–∫ –±–ª–∏–∑–∫–∞—è –ø–æ–¥—Ä—É–≥–∞. –ö–æ—Ä–æ—Ç–∫–∏–º–∏ –∞–±–∑–∞—Ü–∞–º–∏."},
            {"role": "system", "content": f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: {lower}. {plan}"},
            {"role": "user", "content": "–ü–æ–¥–¥–µ—Ä–∂–∏ –º–µ–Ω—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞."}
        ]
        try:
            reply = await llm.chat(msgs, temperature=0.8, max_tokens=500)
        except Exception:
            reply = "–Ø —Ä—è–¥–æ–º. –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å –æ–¥–Ω–æ–≥–æ —Ç—ë–ø–ª–æ–≥–æ —à–∞–≥–∞ ‚Äî –∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º, –∫–∞–∫ —Ç–µ–±–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ üíõ"
        await human_typing(context, update.effective_chat.id, reply)
        db.add_msg(user_id, "user", text_in)
        db.add_msg(user_id, "assistant", reply)
        await update.message.reply_text(reply)
        return

    # –ª–∏–º–∏—Ç—ã
    u = db.get_user(user_id)
    if not u["is_subscribed"]:
        if (u["free_left"] or 0) <= 0:
            await update.message.reply_text(
                "–ü–æ—Ö–æ–∂–µ, –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –•–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π? "
                "–Ø –±—É–¥—É —Ä—è–¥–æ–º üíõ (–∫–æ–º–∞–Ω–¥–∞ /subscribe)"
            )
            return
        db.update_user(user_id, free_left=(u["free_left"] - 1))

    # –¥–∏–∞–ª–æ–≥
    db.add_msg(user_id, "user", text_in)
    msgs = build_messages(user_id, u["name"] or update.effective_user.first_name, text_in)

    try:
        reply = await llm.chat(msgs, temperature=0.85, max_tokens=700)
    except Exception:
        reply = "–ö–∞–∂–µ—Ç—Å—è, —É –º–µ–Ω—è –∑–∞–º–∏–Ω–∫–∞ —Å–æ —Å–≤—è–∑—å—é. –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ üíõ"

    # –∏–º–∏—Ç–∞—Ü–∏—è –Ω–∞–±–æ—Ä–∞ ‚Äî –ø–æ –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–º—É –æ—Ç–≤–µ—Ç—É
    await human_typing(context, update.effective_chat.id, reply)
    db.add_msg(user_id, "assistant", reply)
    await update.message.reply_text(reply)

def main():
    app = Application.builder().token(settings.telegram_bot_token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("profile", profile))
    app.add_handler(CommandHandler("mood", mood))
    app.add_handler(CommandHandler("subscribe", subscribe))
    app.add_handler(CallbackQueryHandler(on_cb))
    # Payments (Stars): pre-checkout + successful
    
    app.add_handler(PreCheckoutQueryHandler(precheckout_stars))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, on_successful_payment))

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))
    app.run_polling()

if __name__ == "__main__":
    main()
