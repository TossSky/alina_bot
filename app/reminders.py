# app/reminders.py
from __future__ import annotations
import re
import random
from datetime import time as dtime, timezone, datetime, timedelta
from zoneinfo import ZoneInfo
from telegram.ext import ContextTypes, Application
from telegram.constants import ParseMode

import app.db as db
from .llm_client import LLMClient
from .prompts import SYSTEM_PROMPT

# –ª–µ–Ω–∏–≤—ã–π –∫–ª–∏–µ–Ω—Ç LLM
_llm = None
def _get_llm():
    global _llm
    if _llm is None:
        _llm = LLMClient()
    return _llm

# ----- TZ helpers -----
def _tzinfo_from_str(tz_str: str):
    if not tz_str:
        return timezone.utc
    m = re.fullmatch(r"UTC([+-])(\d{1,2})", tz_str.upper())
    if m:
        sign, hh = m.group(1), int(m.group(2))
        offset = timedelta(hours=hh if sign == "+" else -hh)
        return timezone(offset)
    try:
        return ZoneInfo(tz_str)
    except Exception:
        return timezone.utc

# ----- –ë–æ–ª–µ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –∏ —á–µ–ª–æ–≤–µ—á–Ω—ã–µ —Ñ–æ–ª–ª–±–µ–∫–∏ -----
FALLBACKS = {
    "morning": [
        "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ üíõ –∫–∞–∫ —Å–ø–∞–ª–æ—Å—å?",
        "—É—Ç—Ä–æ! –∫–∞–∫ –¥–µ–ª–∞?",
        "–ø—Ä–∏–≤–µ—Ç) —É–∂–µ –ø—Ä–æ—Å–Ω—É–ª—Å—è?",
        "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–µ—á–∫–æ üåø",
        "—É—Ç—Ä–æ... –∫–æ—Ñ–µ —É–∂–µ –±—ã–ª?",
        "–ø—Ä–∏–≤–µ—Ç! –∫–∞–∫ –Ω–∞—á–∞–ª—Å—è –¥–µ–Ω—å?",
        "—É—Ç—Ä–æ) —á—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —Å–µ–≥–æ–¥–Ω—è?",
        "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –≤—ã—Å–ø–∞–ª—Å—è?",
        "—É—Ç—Ä–µ—á–∫–æ... –∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?",
    ],
    "evening": [
        "–∫–∞–∫ –ø—Ä–æ—à—ë–ª –¥–µ–Ω—å?",
        "–ø—Ä–∏–≤–µ—Ç) –∫–∞–∫ —Ç—ã?",
        "–≤–µ—á–µ—Ä... —É—Å—Ç–∞–ª?",
        "—Ö–µ–π, –∫–∞–∫ –¥–µ–ª–∞? üíõ",
        "–∫–∞–∫ –¥–µ–Ω—å? –≤—Å—ë –æ–∫?",
        "–ø—Ä–∏–≤–µ—Ç) —á—Ç–æ –Ω–æ–≤–æ–≥–æ?",
        "–∫–∞–∫ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ—à–ª–æ?",
        "–≤–µ—á–µ—Ä) –∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?",
        "–∫–∞–∫ –¥–µ–Ω—å –ø—Ä–æ—à—ë–ª? —É—Å—Ç–∞–ª?",
    ],
    "checkin": [
        "–ø—Ä–∏–≤–µ—Ç) –∫–∞–∫ —Ç—ã?",
        "—Ö–µ–π, —á—Ç–æ –Ω–æ–≤–æ–≥–æ?",
        "–∫–∞–∫ –¥–µ–ª–∞? üíõ",
        "–ø—Ä–∏–≤–µ—Ç... –≤—Å—ë —Ö–æ—Ä–æ—à–æ?",
        "–∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?",
        "—á—Ç–æ –¥–µ–ª–∞–µ—à—å?",
        "–∫–∞–∫ —Ç—ã —Ç–∞–º?",
        "–ø—Ä–∏–≤–µ—Ç) –Ω–µ –ø–æ—Ç–µ—Ä—è–ª—Å—è?",
        "—Ö–µ–π) –≤—Å—ë –æ–∫?",
        "–∫–∞–∫ –ø–æ–∂–∏–≤–∞–µ—à—å?",
    ]
}

def _pick_fallback(rtype: str) -> str:
    """–í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ñ–æ–ª–ª–±–µ–∫–æ–≤"""
    messages = FALLBACKS.get(rtype, FALLBACKS["checkin"])
    return random.choice(messages)

# ----- job callback -----
async def _send_reminder(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    data = context.job.data or {}
    user_id = data.get("user_id")
    rtype = data.get("rtype", "checkin")
    chat_id = user_id

    # –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    u = db.get_user(user_id)
    name = u.get("name") or ""
    style = "gentle"
    
    # –í 80% —Å–ª—É—á–∞–µ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ–ª–ª–±–µ–∫
    if random.random() < 0.8:
        text = _pick_fallback(rtype)
    else:
        # –ò–Ω–æ–≥–¥–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ LLM –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        mood_hints = {
            "morning": "–Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –¥–æ–±—Ä–æ–µ —É—Ç—Ä–µ–Ω–Ω–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –∫–∞–∫ –±—É–¥—Ç–æ –ø–∏—à–µ—à—å –¥—Ä—É–≥—É –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ",
            "evening": "–Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–µ—á–µ—Ä–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–ø—Ä–æ—Å–∏ –∫–∞–∫ –¥–µ–Ω—å",
            "checkin": "–Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –¥—Ä—É–∂–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ —É–∑–Ω–∞–π –∫–∞–∫ –¥–µ–ª–∞"
        }
        hint = mood_hints.get(rtype, mood_hints["checkin"])

        msgs = [
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "system", "content": f"–¢–æ–Ω: {style}. –ò–º—è: {name or '–¥—Ä—É–≥'}."},
            {"role": "system", "content": hint},
            {"role": "system", "content": "–í–ê–ñ–ù–û: –ø–∏—à–∏ –û–ß–ï–ù–¨ –∫–æ—Ä–æ—Ç–∫–æ (1-2 —Ñ—Ä–∞–∑—ã), –∫–∞–∫ –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤"},
            {"role": "user", "content": "–Ω–∞–ø–∏—à–∏ –æ–¥–Ω–æ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"}
        ]

        try:
            llm = _get_llm()
            text = await llm.chat(msgs, temperature=1.0, max_tokens=100, verbosity="short")
            # –ï—Å–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–æ—Å—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ–±—Ä–µ–∑–∞–µ–º
            if text and len(text) > 150:
                text = text[:150].rsplit(" ", 1)[0] + "..."
        except Exception:
            text = _pick_fallback(rtype)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    try:
        await context.bot.send_message(chat_id=chat_id, text=text, parse_mode=ParseMode.MARKDOWN)
    except Exception:
        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –Ω–µ–≥–æ
        await context.bot.send_message(chat_id=chat_id, text=text)

# ----- JobQueue glue -----
def _job_queue(app: Application):
    return getattr(app, "job_queue", None)

def _job_name(user_id: int, rid: int) -> str:
    return f"rem:{user_id}:{rid}"

def _parse_hhmm(s: str):
    try:
        hh, mm = s.strip().split(":")
        return int(hh), int(mm)
    except Exception:
        return None

def schedule_one(app: Application, user_id: int, rid: int, rtype: str, time_local: str, tz_str: str):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ–¥–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
    jq = _job_queue(app)
    if jq is None:
        return

    name = _job_name(user_id, rid)
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º –∂–µ –∏–º–µ–Ω–µ–º
    for j in jq.get_jobs_by_name(name):
        j.schedule_removal()

    parsed = _parse_hhmm(time_local)
    if not parsed:
        return
    hh, mm = parsed

    tzinfo = _tzinfo_from_str(tz_str)

    try:
        jq.run_daily(
            callback=_send_reminder,
            time=dtime(hour=hh, minute=mm, tzinfo=tzinfo),
            data={"user_id": user_id, "rtype": rtype},
            name=name,
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

def deschedule_one(app: Application, user_id: int, rid: int):
    """–û—Ç–º–µ–Ω—è–µ—Ç –æ–¥–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
    jq = _job_queue(app)
    if jq is None:
        return
    name = _job_name(user_id, rid)
    for j in jq.get_jobs_by_name(name):
        j.schedule_removal()

def reschedule_all_for_user(app: Application, user_id: int):
    """–ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–∏ —Å–º–µ–Ω–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞)"""
    jq = _job_queue(app)
    if jq is None:
        return
    tz = db.get_tz(user_id) or "UTC"
    for r in db.list_reminders(user_id):
        if r["active"]:
            schedule_one(app, user_id, r["id"], r["rtype"], r["time_local"], tz)
        else:
            deschedule_one(app, user_id, r["id"])