# app/payments.py (Stars-only)
from __future__ import annotations
import uuid
from telegram import LabeledPrice, PreCheckoutQuery, Update
from telegram.ext import ContextTypes
from .config import settings
import app.db as db

# –ú–∞–ø–ø–∏–Ω–≥ –ø–ª–∞–Ω–æ–≤
PLANS = {
    "day":   {"amount": settings.stars_day_amount,   "days": settings.sub_days_day,   "title": "–¥–µ–Ω—å –æ–±—â–µ–Ω–∏—è"},
    "week":  {"amount": settings.stars_week_amount,  "days": settings.sub_days_week,  "title": "–Ω–µ–¥–µ–ª—è –æ–±—â–µ–Ω–∏—è"},
    "month": {"amount": settings.stars_month_amount, "days": settings.sub_days_month, "title": "–º–µ—Å—è—Ü –æ–±—â–µ–Ω–∏—è"},
}

def _payload(plan: str) -> str:
    return f"stars_{plan}_{uuid.uuid4()}"

async def send_stars_invoice(update: Update, context: ContextTypes.DEFAULT_TYPE, plan: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω–≤–æ–π—Å –≤ XTR –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"""
    if plan not in PLANS:
        await update.effective_message.reply_text("–≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø–ª–∞–Ω–æ–≤: –¥–µ–Ω—å, –Ω–µ–¥–µ–ª—è –∏–ª–∏ –º–µ—Å—è—Ü üíõ")
        return

    user_id = update.effective_user.id
    meta = PLANS[plan]
    title = meta["title"]
    description = "–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
    payload = _payload(plan)
    currency = "XTR"
    prices = [LabeledPrice(title, meta["amount"])]

    # –°–æ—Ö—Ä–∞–Ω–∏–º –∫–∞–∫ pending
    db.upsert_payment(
        user_id=user_id, provider="stars", order_id=payload,
        amount=meta["amount"], currency=currency, status="pending", raw=plan
    )

    await context.bot.send_invoice(
        chat_id=update.effective_chat.id,
        title=title,
        description=description,
        payload=payload,
        provider_token="",  # –¥–ª—è Stars –ù–ï –Ω—É–∂–µ–Ω
        currency=currency,
        prices=prices,
        start_parameter=f"stars-{plan}",
    )

async def precheckout_stars(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π pre-checkout –¥–ª—è Stars"""
    query: PreCheckoutQuery = update.pre_checkout_query
    await query.answer(ok=True)

def _extract_plan_from_payload(payload: str) -> str:
    # —Ñ–æ—Ä–º–∞—Ç: stars_<plan>_<uuid>
    try:
        return payload.split("_", 2)[1]
    except Exception:
        return "month"

async def on_successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sp = update.message.successful_payment
    payload = sp.invoice_payload
    plan = _extract_plan_from_payload(payload)
    meta = PLANS.get(plan, PLANS["month"])

    db.mark_payment(order_id=payload, status="paid")
    db.activate_subscription(update.effective_user.id, days=meta["days"])

    period_label = meta["title"].lower()
    # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.message.reply_text(f"—Å–ø–∞—Å–∏–±–æ! –±—É–¥—É —Ä—è–¥–æ–º: {period_label} üíõ")