# app/payments.py
# -*- coding: utf-8 -*-
"""
–û–ø–ª–∞—Ç—ã: Telegram Stars + Redsys (–ø–æ–ª–Ω—ã–π –º–æ–¥—É–ª—å)
- Stars: –∏–Ω–≤–æ–π—Å –≤ XTR, pre-checkout, —É—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ -> –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
- Redsys: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –ø–æ–¥–ø–∏—Å–∏, —Å—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—à /pay/redsys/start,
          –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ IPN (–∏—Å–ø–æ–ª—å–∑—É–π verify_redsys_signature() –≤ webhooks)

–¢—Ä–µ–±—É–µ—Ç:
  - python-telegram-bot v21+
  - pycryptodome (DES3)
  - –∫–æ–Ω—Ñ–∏–≥ –≤ app/config.py –∏ .env (—Å–º. –ø–æ–ª—è REDSYS_* –∏ STARS_MONTH_AMOUNT, SUB_DAYS)
"""

from __future__ import annotations
import base64
import json
import time
import uuid
import hmac
import hashlib
from typing import Tuple, Dict, Any

from telegram import LabeledPrice, PreCheckoutQuery, Update
from telegram.ext import ContextTypes
from Crypto.Cipher import DES3  # pip install pycryptodome

from .config import settings
import app.db as db


# ============================================================================
#                           TELEGRAM STARS (XTR)
# ============================================================================

async def send_stars_invoice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–≤–æ–π—Å –Ω–∞ –æ–ø–ª–∞—Ç—É –∑–≤—ë–∑–¥–∞–º–∏ (XTR). provider_token –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
    """
    user_id = update.effective_user.id
    title = "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü"
    description = "–ù–µ–æ–≥—Ä–∞–Ω–∏—á—ë–Ω–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π."
    payload = f"stars_sub_{uuid.uuid4()}"
    currency = "XTR"
    prices = [LabeledPrice("–ú–µ—Å—è—Ü –æ–±—â–µ–Ω–∏—è", settings.stars_month_amount)]  # —Ü–µ–Ω–∞ –≤ XTR

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –∫–∞–∫ pending
    db.upsert_payment(
        user_id=user_id,
        provider="stars",
        order_id=payload,
        amount=settings.stars_month_amount,
        currency=currency,
        status="pending",
        raw=""
    )

    await context.bot.send_invoice(
        chat_id=update.effective_chat.id,
        title=title,
        description=description,
        payload=payload,
        provider_token="",  # –¥–ª—è Stars –ù–ï —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–∫–µ–Ω
        currency=currency,
        prices=prices,
        start_parameter="stars-sub",
    )


async def precheckout_stars(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π pre-checkout –¥–ª—è –ª—é–±–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞ (–≤ —Ç.—á. Stars).
    """
    query: PreCheckoutQuery = update.pre_checkout_query
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ payload/–ª–∏–º–∏—Ç–æ–≤.
    await query.answer(ok=True)


async def on_successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã (–≤ —Ç.—á. Stars).
    """
    sp = update.message.successful_payment
    payload = sp.invoice_payload

    # –û—Ç–º–µ—á–∞–µ–º –ø–ª–∞—Ç—ë–∂ –∫–∞–∫ paid –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ N –¥–Ω–µ–π
    db.mark_payment(order_id=payload, status="paid")
    user_id = update.effective_user.id
    db.activate_subscription(user_id, days=settings.sub_days)

    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –Ø —Ä—è–¥–æ–º –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤ —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞ üíõ")


# ============================================================================
#                                 REDSYS
# ============================================================================

def redsys_endpoint() -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —à–ª—é–∑–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è.
    """
    if settings.redsys_env == "test":
        return "https://sis-t.redsys.es:25443/sis/realizarPago"  # Sandbox
    return "https://sis.redsys.es/sis/realizarPago"               # Production


def make_order_id() -> str:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞ Ds_Merchant_Order (–æ–±—ã—á–Ω–æ –¥–æ 12 —Å–∏–º–≤–æ–ª–æ–≤).
    –£ Redsys –∫ —Ñ–æ—Ä–º–∞—Ç—É –µ—Å—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è; timestamp –æ–±—ã—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –≤ –ø–µ—Å–æ—á–Ω–∏—Ü–µ.
    """
    return str(int(time.time()))


def _b64e(data: bytes) -> str:
    return base64.b64encode(data).decode("utf-8")


def _b64d(data_b64: str) -> bytes:
    return base64.b64decode(data_b64)


def _json_to_b64(d: Dict[str, Any]) -> str:
    return _b64e(json.dumps(d).encode("utf-8"))


def derive_3des_key(merchant_key_b64: str, order: str) -> bytes:
    """
    –ü–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ Redsys: –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–±–æ—á–∏–π –∫–ª—é—á –∫–∞–∫
    3DES-ECB(merchant_key, order_padded), –≥–¥–µ merchant_key ‚Äî base64-–∫–ª—é—á –º–µ—Ä—á–∞–Ω—Ç–∞,
    –∞ order ‚Äî —Å—Ç—Ä–æ–∫–∞ Ds_Merchant_Order, –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –Ω—É–ª—è–º–∏ –¥–æ –∫—Ä–∞—Ç–Ω–æ—Å—Ç–∏ 8.
    """
    k = _b64d(merchant_key_b64)
    cipher = DES3.new(k, DES3.MODE_ECB)
    data = order.encode("utf-8")
    pad = (8 - (len(data) % 8)) % 8
    data_padded = data + b"\x00" * pad
    return cipher.encrypt(data_padded)


def sign_redsys(merchant_key_b64: str, order: str, merchant_params_b64: str) -> str:
    """
    –ü–æ–¥–ø–∏—Å—å Redsys: HMAC-SHA256(base64(params)) —Å –∫–ª—é—á–æ–º –∏–∑ derive_3des_key(order),
    —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî base64.
    """
    key = derive_3des_key(merchant_key_b64, order)
    mac = hmac.new(key, merchant_params_b64.encode("utf-8"), hashlib.sha256).digest()
    return _b64e(mac)


def build_redsys_merchant_params(order: str, amount_eur_cents: int, user_id: int) -> Tuple[str, str, str]:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç —Ç—Ä–æ–π–∫—É (version, params_b64, signature) –¥–ª—è POST –Ω–∞ Redsys.
    - version: 'HMAC_SHA256_V1'
    - params_b64: base64(JSON —Å Ds_Merchant_* –ø–æ–ª—è–º–∏)
    - signature: base64(HMAC-SHA256(...)) –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º Redsys
    """
    merchant_params = {
        "Ds_Merchant_Amount": str(amount_eur_cents),
        "Ds_Merchant_Currency": settings.redsys_currency,       # 978 (EUR)
        "Ds_Merchant_Order": order,
        "Ds_Merchant_MerchantCode": settings.redsys_merchant_code,  # FUC
        "Ds_Merchant_Terminal": settings.redsys_terminal,           # –æ–±—ã—á–Ω–æ "1"
        "Ds_Merchant_TransactionType": "0",                         # –ø—Ä–æ–¥–∞–∂–∞
        "Ds_Merchant_MerchantURL": settings.redsys_notify_url,      # IPN/notify
        "Ds_Merchant_UrlOK": settings.redsys_ok_url,                # –∫—É–¥–∞ –≤–µ—Ä–Ω—É—Ç—å —é–∑–µ—Ä–∞ (—É—Å–ø–µ—Ö)
        "Ds_Merchant_UrlKO": settings.redsys_ko_url,                # –∫—É–¥–∞ –≤–µ—Ä–Ω—É—Ç—å —é–∑–µ—Ä–∞ (–æ—à–∏–±–∫–∞)
        # –ú—ã –ø–µ—Ä–µ–¥–∞—ë–º user_id –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        "Ds_Merchant_MerchantData": json.dumps({"user_id": user_id}),
    }

    params_b64 = _json_to_b64(merchant_params)
    signature = sign_redsys(settings.redsys_key, order, params_b64)
    version = "HMAC_SHA256_V1"
    return version, params_b64, signature


def build_redsys_start_url(user_id: int, amount_eur_cents: int) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –ù–ê–® —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç (/pay/redsys/start),
    –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–¥–∞—Å—Ç HTML —Å –∞–≤—Ç–æ-POST —Ñ–æ—Ä–º–æ–π –Ω–∞ Redsys (—Å–º. app/webhooks.py).
    –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç—ë–∂ –∫–∞–∫ pending.
    """
    order = make_order_id()
    # –°–æ—Ö—Ä–∞–Ω–∏–º pending –ø–ª–∞—Ç—ë–∂
    db.upsert_payment(
        user_id=user_id,
        provider="redsys",
        order_id=order,
        amount=amount_eur_cents,
        currency="EUR",
        status="pending",
        raw=""
    )

    # –ë–∞–∑–æ–≤—ã–π URL –±–µ—Ä—ë–º –∏–∑ REDSYS_NOTIFY_URL (—É–¥–∞–ª–∏–º —Ö–≤–æ—Å—Ç /webhooks/redsys)
    base = settings.redsys_notify_url
    base = base.rsplit("/webhooks/redsys", 1)[0]
    return f"{base}/pay/redsys/start?order={order}&amount={amount_eur_cents}&user_id={user_id}"


def verify_redsys_signature(params_b64: str, signature_b64: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ Redsys –Ω–∞ IPN (webhooks).
    –ê–ª–≥–æ—Ä–∏—Ç–º:
      1) decode params_b64 -> JSON
      2) –∏–∑–≤–ª–µ—á—å order = Ds_Order –∏–ª–∏ Ds_Merchant_Order
      3) –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å sign_redsys(settings.redsys_key, order, params_b64)
      4) —Å—Ä–∞–≤–Ω–∏—Ç—å —Å signature_b64 (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ Redsys –º–æ–∂–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å URL-safe base64)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True/False.
    """
    try:
        data = json.loads(base64.b64decode(params_b64).decode("utf-8"))
        order = data.get("Ds_Order") or data.get("Ds_Merchant_Order")
        if not order:
            return False

        expected = sign_redsys(settings.redsys_key, order, params_b64)

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ–±–µ –ø–æ–¥–ø–∏—Å–∏: –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ Redsys –ø—Ä–∏—Å—ã–ª–∞—é—Ç URL-safe base64
        def _norm(s: str) -> bytes:
            # –ü—Ä–∏–≤–µ–¥—ë–º –∫ –æ–±—ã—á–Ω–æ–º—É b64 (–∑–∞–º–µ–Ω–∞ URL-safe —Å–∏–º–≤–æ–ª–æ–≤ –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–∞–¥–¥–∏–Ω–≥–∞)
            s = s.replace("-", "+").replace("_", "/")
            # –î–æ–±—å—ë–º '=' –¥–æ –∫—Ä–∞—Ç–Ω–æ—Å—Ç–∏ 4
            pad = (4 - (len(s) % 4)) % 4
            s += "=" * pad
            return base64.b64decode(s)

        got = _norm(signature_b64)
        exp = base64.b64decode(expected)
        return hmac.compare_digest(got, exp)
    except Exception:
        return False
