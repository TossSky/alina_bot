# app/renewals.py
from __future__ import annotations
from datetime import datetime, timezone, timedelta
from telegram.ext import Application, ContextTypes
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

def _jq(app: Application):
    return getattr(app, "job_queue", None)

def _job_name(user_id: int, until_iso: str) -> str:
    # —É–Ω–∏–∫–∞–ª—å–Ω–æ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ "–≤—Ä–µ–º–µ–Ω–∏ —Ä—è–¥–æ–º"
    return f"renew:{user_id}:{until_iso}"

def _parse_until(until_iso: str) -> datetime | None:
    """
    sub_until —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ ISO –±–µ–∑ —Ç–∞–π–º–∑–æ–Ω—ã (–Ω–∞–∏–≤–Ω—ã–π UTC).
    –ü—Ä–µ–≤—Ä–∞—Ç–∏–º –≤ aware-UTC –¥–ª—è JobQueue.
    """
    try:
        dt = datetime.fromisoformat(until_iso)
        # –¥–µ–ª–∞–µ–º aware –≤ UTC
        return dt.replace(tzinfo=timezone.utc)
    except Exception:
        return None

async def _send_renewal_nudge(ctx: ContextTypes.DEFAULT_TYPE):
    data = ctx.job.data or {}
    user_id = data.get("user_id")

    text = (
        "–•–æ—á–µ—à—å, —è –ø–æ–±—É–¥—É —Ä—è–¥–æ–º –µ—â—ë –Ω–µ–º–Ω–æ–≥–æ? üíõ\n"
        "–í—ã–±–µ—Ä–∏, –∫–∞–∫ —Ç–µ–±–µ —É–¥–æ–±–Ω–µ–µ:"
    )
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚≠ê –ï—â—ë –Ω–∞ –¥–µ–Ω—å",   callback_data="pay_stars:day")],
        [InlineKeyboardButton("‚≠ê –ù–∞ –Ω–µ–¥–µ–ª—é",     callback_data="pay_stars:week")],
        [InlineKeyboardButton("‚≠ê –ù–∞ –º–µ—Å—è—Ü",      callback_data="pay_stars:month")],
    ])
    await ctx.bot.send_message(chat_id=user_id, text=text, reply_markup=kb)

def schedule_renewal_nudge(app: Application, user_id: int, sub_until_iso: str, hours_before: int = 12):
    """
    –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ —Ç—ë–ø–ª–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ `hours_before` —á–∞—Å–æ–≤ –¥–æ –∫–æ–Ω—Ü–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.
    –ï—Å–ª–∏ JobQueue –Ω–µ—Ç ‚Äî —Ç–∏—Ö–æ –≤—ã—Ö–æ–¥–∏–º.
    """
    jq = _jq(app)
    if jq is None or not sub_until_iso:
        return

    until_utc = _parse_until(sub_until_iso)
    if not until_utc:
        return

    when_utc = until_utc - timedelta(hours=hours_before)
    now_utc = datetime.now(timezone.utc)
    # –µ—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ ‚Äî –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º (–∏–ª–∏ –º–æ–∂–Ω–æ —Å–º–µ—Å—Ç–∏—Ç—å –Ω–∞ +60—Å –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏)
    if when_utc <= now_utc:
        return

    name = _job_name(user_id, until_utc.isoformat(timespec="seconds"))

    # —É–¥–∞–ª–∏–º –≤–æ–∑–º–æ–∂–Ω—ã–π –¥—É–±–ª—å —Å —Ç–µ–º –∂–µ –∏–º–µ–Ω–µ–º
    for j in jq.get_jobs_by_name(name):
        j.schedule_removal()

    jq.run_once(
        callback=_send_renewal_nudge,
        when=when_utc,
        data={"user_id": user_id},
        name=name,
    )
