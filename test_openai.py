# test_gpt_4o_mini.py - —Ç–µ—Å—Ç –Ω–æ–≤–æ–π –±—ã—Å—Ç—Ä–æ–π –º–æ–¥–µ–ª–∏ gpt-4o-mini
import asyncio
import httpx
from openai import AsyncOpenAI
from dotenv import load_dotenv
import os
import time

load_dotenv()

async def test_gpt_4o_mini():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ —Å–∫–æ—Ä–æ—Å—Ç—å gpt-4o-mini"""
    
    api_key = os.getenv("OPENAI_API_KEY")
    use_proxy = os.getenv("OPENAI_USE_PROXY", "false").lower() == "true"
    proxy_address = os.getenv("OPENAI_PROXY_ADDRESS", "")
    model = "gpt-4o-mini"  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º gpt-4o-mini
    
    if not api_key:
        print("‚ùå OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω")
        return
    
    print(f"üîë API Key: {api_key[:10]}...")
    print(f"üåê –ü—Ä–æ–∫—Å–∏: {'–≤–∫–ª—é—á–µ–Ω' if use_proxy else '–æ—Ç–∫–ª—é—á–µ–Ω'}")
    print(f"üì° –ê–¥—Ä–µ—Å –ø—Ä–æ–∫—Å–∏: {proxy_address if use_proxy else '–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è'}")
    print(f"ü§ñ –ú–æ–¥–µ–ª—å: {model}")
    print()
    
    # –°–æ–∑–¥–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç
    if use_proxy and proxy_address:
        http_client = httpx.AsyncClient(
            proxy=proxy_address,
            timeout=httpx.Timeout(30.0, connect=10.0)
        )
        print("‚úÖ HTTP –∫–ª–∏–µ–Ω—Ç —Å –ø—Ä–æ–∫—Å–∏ —Å–æ–∑–¥–∞–Ω")
    else:
        http_client = httpx.AsyncClient(
            timeout=httpx.Timeout(30.0, connect=10.0)
        )
        print("‚úÖ HTTP –∫–ª–∏–µ–Ω—Ç –±–µ–∑ –ø—Ä–æ–∫—Å–∏ —Å–æ–∑–¥–∞–Ω")
    
    # –°–æ–∑–¥–∞–µ–º OpenAI –∫–ª–∏–µ–Ω—Ç
    try:
        client = AsyncOpenAI(
            api_key=api_key,
            http_client=http_client,
            max_retries=2
        )
        print("‚úÖ OpenAI –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return
    
    # –¢–µ—Å—Ç 1: –ö–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç
    try:
        print("\nüìù –¢–µ—Å—Ç 1: –ö–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç")
        start = time.time()
        
        response = await client.chat.completions.create(
            model=model,
            messages=[
                {"role": "system", "content": "–û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ."},
                {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"}
            ],
            max_tokens=100,
            temperature=0.3,
            presence_penalty = 0,
            frequency_penalty = 0,
            top_p=1
        )
        
        elapsed = time.time() - start
        message = response.choices[0].message.content
        
        print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ {elapsed:.2f} —Å–µ–∫")
        print(f"üìù –û—Ç–≤–µ—Ç: {message}")
        print(f"üìä –¢–æ–∫–µ–Ω—ã: {response.usage.total_tokens if response.usage else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 2: –°—Ä–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç
    try:
        print("\nüìù –¢–µ—Å—Ç 2: –°—Ä–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç")
        start = time.time()
        
        response = await client.chat.completions.create(
            model=model,
            messages=[
                {"role": "system", "content": "–¢—ã –ê–ª–∏–Ω–∞, –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è –¥–µ–≤—É—à–∫–∞."},
                {"role": "user", "content": "–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –æ –∫–æ—Å–º–æ—Å–µ"}
            ],
            max_tokens=500,
            temperature=0.3,
            presence_penalty = 0,
            frequency_penalty = 0,
            top_p=1
        )
        
        elapsed = time.time() - start
        message = response.choices[0].message.content
        
        print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ {elapsed:.2f} —Å–µ–∫")
        print(f"üìù –û—Ç–≤–µ—Ç ({len(message)} —Å–∏–º–≤–æ–ª–æ–≤): {message[:200]}...")
        print(f"üìä –¢–æ–∫–µ–Ω—ã: {response.usage.total_tokens if response.usage else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 3: –î–ª–∏–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    try:
        print("\nüìù –¢–µ—Å—Ç 3: –î–ª–∏–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫")
        start = time.time()
        
        response = await client.chat.completions.create(
            model=model,
            messages=[
                {"role": "system", "content": "–û—Ç–≤–µ—á–∞–π –ø–æ–ª–Ω–æ, —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫ –º–µ–∂–¥—É –ø—É–Ω–∫—Ç–∞–º–∏."},
                {"role": "user", "content": "–ù–∞–∑–æ–≤–∏ 10 –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –æ –∑–µ–±—Ä–∞—Ö"}
            ],
            max_tokens=1500,
            temperature=0.3,
            presence_penalty = 0,
            frequency_penalty = 0,
            top_p=1
        )
        
        elapsed = time.time() - start
        message = response.choices[0].message.content
        
        print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ {elapsed:.2f} —Å–µ–∫")
        print(f"üìù –û—Ç–≤–µ—Ç ({len(message)} —Å–∏–º–≤–æ–ª–æ–≤):")
        print(message)
        print(f"üìä –¢–æ–∫–µ–Ω—ã: {response.usage.total_tokens if response.usage else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
        print(f"üìä Finish reason: {response.choices[0].finish_reason}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã
        try:
            await client.close()
            await http_client.aclose()
            print("\n‚úÖ –ö–ª–∏–µ–Ω—Ç—ã –∑–∞–∫—Ä—ã—Ç—ã")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏: {e}")
    
    print("\nüìà –ò–¢–û–ì–ò:")
    print("- gpt-4o-mini - —Å–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —á–∞—Ç-–±–æ—Ç–æ–≤")
    print("- –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: max_tokens=800-1500 –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤")
    print("- –î–ª—è —Å–ø–∏—Å–∫–æ–≤ –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ 1500 —Ç–æ–∫–µ–Ω–æ–≤")
    print("- –ö–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –º–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å 300 —Ç–æ–∫–µ–Ω–∞–º–∏")

if __name__ == "__main__":
    asyncio.run(test_gpt_4o_mini())