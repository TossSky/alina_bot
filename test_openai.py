# test_openai.py - –±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç OpenAI –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
import asyncio
import httpx
from openai import AsyncOpenAI
from dotenv import load_dotenv
import os

load_dotenv()

async def test_openai_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏"""
    
    api_key = os.getenv("OPENAI_API_KEY")
    use_proxy = os.getenv("OPENAI_USE_PROXY", "false").lower() == "true"
    proxy_address = os.getenv("OPENAI_PROXY_ADDRESS", "")
    model = os.getenv("OPENAI_MODEL", "gpt-5-mini-2025-08-07")
    
    if not api_key:
        print("‚ùå OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω")
        return
    
    print(f"üîë API Key: {api_key[:10]}...")
    print(f"üåê –ü—Ä–æ–∫—Å–∏: {'–≤–∫–ª—é—á–µ–Ω' if use_proxy else '–æ—Ç–∫–ª—é—á–µ–Ω'}")
    print(f"üì° –ê–¥—Ä–µ—Å –ø—Ä–æ–∫—Å–∏: {proxy_address if use_proxy else '–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è'}")
    print(f"ü§ñ –ú–æ–¥–µ–ª—å: {model}")
    print()
    
    # –°–æ–∑–¥–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç
    if use_proxy and proxy_address:
        http_client = httpx.AsyncClient(
            proxy=proxy_address,
            timeout=httpx.Timeout(20.0, connect=5.0)
        )
        print("‚úÖ HTTP –∫–ª–∏–µ–Ω—Ç —Å –ø—Ä–æ–∫—Å–∏ —Å–æ–∑–¥–∞–Ω")
    else:
        http_client = httpx.AsyncClient(
            timeout=httpx.Timeout(20.0, connect=5.0)
        )
        print("‚úÖ HTTP –∫–ª–∏–µ–Ω—Ç –±–µ–∑ –ø—Ä–æ–∫—Å–∏ —Å–æ–∑–¥–∞–Ω")
    
    # –°–æ–∑–¥–∞–µ–º OpenAI –∫–ª–∏–µ–Ω—Ç
    try:
        client = AsyncOpenAI(
            api_key=api_key,
            http_client=http_client,
            max_retries=2
        )
        print("‚úÖ OpenAI –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    try:
        print("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å...")
        response = await client.chat.completions.create(
            model=model,
            messages=[
                {"role": "system", "content": "–û—Ç–≤–µ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ."},
                {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"}
            ],
            max_completion_tokens=100,
            temperature=1
        )
        
        message = response.choices[0].message.content
        print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {message}")
        print(f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {response.usage.total_tokens if response.usage else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã
        try:
            await client.close()
            print("‚úÖ –ö–ª–∏–µ–Ω—Ç—ã –∑–∞–∫—Ä—ã—Ç—ã")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏: {e}")

if __name__ == "__main__":
    asyncio.run(test_openai_connection())